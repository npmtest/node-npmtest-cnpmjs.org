{"/home/travis/build/npmtest/node-npmtest-cnpmjs.org/test.js":"/* istanbul instrument in package npmtest_cnpmjs_org */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/lib.npmtest_cnpmjs.org.js":"/* istanbul instrument in package npmtest_cnpmjs_org */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_cnpmjs_org = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_cnpmjs_org = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-cnpmjs.org && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_cnpmjs_org */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_cnpmjs_org\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_cnpmjs_org.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_cnpmjs_org.rollup.js'] =\n            local.assetsDict['/assets.npmtest_cnpmjs_org.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_cnpmjs_org.__dirname + '/lib.npmtest_cnpmjs_org.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/index.js":"/**!\n * Copyright(c) cnpmjs.org and other contributors.\n * MIT Licensed\n *\n * Authors:\n *  dead_horse <dead_horse@qq.com> (http://deadhorse.me)\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar config = require('./config');\n\nexports.loadConfig = config.loadConfig;\nexports.config = config;\n\nexports.startWorker = function (customConfig) {\n  config.loadConfig(customConfig);\n  require('./worker');\n};\n\nexports.startSync = function (customConfig) {\n  config.loadConfig(customConfig);\n  require('./sync');\n};\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/config/index.js":"'use strict';\n\nvar mkdirp = require('mkdirp');\nvar copy = require('copy-to');\nvar path = require('path');\nvar fs = require('fs');\nvar os = require('os');\n\nvar version = require('../package.json').version;\n\nvar root = path.dirname(__dirname);\nvar dataDir = path.join(process.env.HOME || root, '.cnpmjs.org');\n\nvar config = {\n  version: version,\n  dataDir: dataDir,\n\n  /**\n   * Cluster mode\n   */\n  enableCluster: false,\n  numCPUs: os.cpus().length,\n\n  /*\n   * server configure\n   */\n\n  registryPort: 7001,\n  webPort: 7002,\n  bindingHost: '127.0.0.1', // only binding on 127.0.0.1 for local access\n\n  // debug mode\n  // if in debug mode, some middleware like limit wont load\n  // logger module will print to stdout\n  debug: process.env.NODE_ENV === 'development',\n  // page mode, enable on development env\n  pagemock: process.env.NODE_ENV === 'development',\n  // session secret\n  sessionSecret: 'cnpmjs.org test session secret',\n  // max request json body size\n  jsonLimit: '10mb',\n  // log dir name\n  logdir: path.join(dataDir, 'logs'),\n  // update file template dir\n  uploadDir: path.join(dataDir, 'downloads'),\n  // web page viewCache\n  viewCache: false,\n\n  // config for koa-limit middleware\n  // for limit download rates\n  limit: {\n    enable: false,\n    token: 'koa-limit:download',\n    limit: 1000,\n    interval: 1000 * 60 * 60 * 24,\n    whiteList: [],\n    blackList: [],\n    message: 'request frequency limited, any question, please contact fengmk2@gmail.com',\n  },\n\n  enableCompress: false, // enable gzip response or not\n\n  // default system admins\n  admins: {\n    // name: email\n    fengmk2: 'fengmk2@gmail.com',\n    admin: 'admin@cnpmjs.org',\n    dead_horse: 'dead_horse@qq.com',\n  },\n\n  // email notification for errors\n  // check https://github.com/andris9/Nodemailer for more informations\n  mail: {\n    enable: false,\n    appname: 'cnpmjs.org',\n    from: 'cnpmjs.org mail sender <adderss@gmail.com>',\n    service: 'gmail',\n    auth: {\n      user: 'address@gmail.com',\n      pass: 'your password'\n    }\n  },\n\n  logoURL: 'https://os.alipayobjects.com/rmsportal/oygxuIUkkrRccUz.jpg', // cnpm logo image url\n  adBanner: '',\n  customReadmeFile: '', // you can use your custom readme file instead the cnpm one\n  customFooter: '', // you can add copyright and site total script html here\n  npmClientName: 'cnpm', // use `${name} install package`\n  packagePageContributorSearch: true, // package page contributor link to search, default is true\n\n  // max handle number of package.json `dependencies` property\n  maxDependencies: 200,\n  // backup filepath prefix\n  backupFilePrefix: '/cnpm/backup/',\n\n  /**\n   * database config\n   */\n\n  database: {\n    db: 'cnpmjs_test',\n    username: 'root',\n    password: '',\n\n    // the sql dialect of the database\n    // - currently supported: 'mysql', 'sqlite', 'postgres', 'mariadb'\n    dialect: 'sqlite',\n\n    // custom host; default: 127.0.0.1\n    host: '127.0.0.1',\n\n    // custom port; default: 3306\n    port: 3306,\n\n    // use pooling in order to reduce db connection overload and to increase speed\n    // currently only for mysql and postgresql (since v1.5.0)\n    pool: {\n      maxConnections: 10,\n      minConnections: 0,\n      maxIdleTime: 30000\n    },\n\n    // the storage engine for 'sqlite'\n    // default store into ~/.cnpmjs.org/data.sqlite\n    storage: path.join(dataDir, 'data.sqlite'),\n\n    logging: !!process.env.SQL_DEBUG,\n  },\n\n  // package tarball store in local filesystem by default\n  nfs: require('fs-cnpm')({\n    dir: path.join(dataDir, 'nfs')\n  }),\n  // if set true, will 302 redirect to `nfs.url(dist.key)`\n  downloadRedirectToNFS: false,\n\n  // registry url name\n  registryHost: 'r.cnpmjs.org',\n\n  /**\n   * registry mode config\n   */\n\n  // enable private mode or not\n  // private mode: only admins can publish, other users just can sync package from source npm\n  // public mode: all users can publish\n  enablePrivate: false,\n\n  // registry scopes, if don't set, means do not support scopes\n  scopes: [ '@cnpm', '@cnpmtest', '@cnpm-test' ],\n\n  // some registry already have some private packages in global scope\n  // but we want to treat them as scoped private packages,\n  // so you can use this white list.\n  privatePackages: [],\n\n  /**\n   * sync configs\n   */\n\n  // the official npm registry\n  // cnpm wont directly sync from this one\n  // but sometimes will request it for some package infomations\n  // please don't change it if not necessary\n  officialNpmRegistry: 'https://registry.npmjs.com',\n  officialNpmReplicate: 'https://replicate.npmjs.com',\n\n  // sync source, upstream registry\n  // If you want to directly sync from official npm's registry\n  // please drop them an email first\n  sourceNpmRegistry: 'https://registry.npm.taobao.org',\n\n  // upstream registry is base on cnpm/cnpmjs.org or not\n  // if your upstream is official npm registry, please turn it off\n  sourceNpmRegistryIsCNpm: true,\n\n  // if install return 404, try to sync from source registry\n  syncByInstall: true,\n\n  // sync mode select\n  // none: do not sync any module, proxy all public modules from sourceNpmRegistry\n  // exist: only sync exist modules\n  // all: sync all modules\n  syncModel: 'none', // 'none', 'all', 'exist'\n\n  syncConcurrency: 1,\n  // sync interval, default is 10 minutes\n  syncInterval: '10m',\n\n  // sync polular modules, default to false\n  // because cnpm can't auto sync tag change for now\n  // so we want to sync popular modules to ensure their tags\n  syncPopular: false,\n  syncPopularInterval: '1h',\n  // top 100\n  topPopular: 100,\n\n  // sync devDependencies or not, default is false\n  syncDevDependencies: false,\n\n  // changes streaming sync\n  syncChangesStream: false,\n  handleSyncRegistry: 'http://127.0.0.1:7001',\n\n  // badge subject on http://shields.io/\n  badgePrefixURL: 'https://img.shields.io/badge',\n  badgeSubject: 'cnpm',\n\n  // custom user service, @see https://github.com/cnpm/cnpmjs.org/wiki/Use-Your-Own-User-Authorization\n  // when you not intend to ingegrate with your company's user system, then use null, it would\n  // use the default cnpm user system\n  userService: null,\n\n  // always-auth https://docs.npmjs.com/misc/config#always-auth\n  // Force npm to always require authentication when accessing the registry, even for GET requests.\n  alwaysAuth: false,\n\n  // if you're behind firewall, need to request through http proxy, please set this\n  // e.g.: `httpProxy: 'http://proxy.mycompany.com:8080'`\n  httpProxy: null,\n\n  // snyk.io root url\n  snykUrl: 'https://snyk.io',\n};\n\nif (process.env.NODE_ENV !== 'test') {\n  var customConfig;\n  if (process.env.NODE_ENV === 'development') {\n    customConfig = path.join(root, 'config', 'config.js');\n  } else {\n    // 1. try to load `$dataDir/config.json` first, not exists then goto 2.\n    // 2. load config/config.js, everything in config.js will cover the same key in index.js\n    customConfig = path.join(dataDir, 'config.json');\n    if (!fs.existsSync(customConfig)) {\n      customConfig = path.join(root, 'config', 'config.js');\n    }\n  }\n  if (fs.existsSync(customConfig)) {\n    copy(require(customConfig)).override(config);\n  }\n}\n\nmkdirp.sync(config.logdir);\nmkdirp.sync(config.uploadDir);\n\nmodule.exports = config;\n\nconfig.loadConfig = function (customConfig) {\n  if (!customConfig) {\n    return;\n  }\n  copy(customConfig).override(config);\n};\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/dispatch.js":"'use strict';\n\nvar childProcess = require('child_process');\nvar path = require('path');\nvar util = require('util');\nvar cfork = require('cfork');\nvar config = require('./config');\nvar workerPath = path.join(__dirname, 'worker.js');\nvar syncPath = path.join(__dirname, 'sync');\n\nconsole.log('Starting cnpmjs.org ...\\ncluster: %s\\nadmins: %j\\nscopes: %j\\nsourceNpmRegistry: %s\\nsyncModel: %s',\n  config.enableCluster, config.admins, config.scopes, config.sourceNpmRegistry, config.syncModel);\n\nif (config.enableCluster) {\n  forkWorker();\n  if (config.syncModel !== 'none') {\n    forkSyncer();\n  }\n} else {\n  require(workerPath);\n  if (config.syncModel !== 'none') {\n    require(syncPath);\n  }\n}\n\nfunction forkWorker() {\n  cfork({\n    exec: workerPath,\n    count: config.numCPUs,\n  }).on('fork', function (worker) {\n    console.log('[%s] [worker:%d] new worker start', Date(), worker.process.pid);\n  }).on('disconnect', function (worker) {\n    console.error('[%s] [master:%s] wroker:%s disconnect, suicide: %s, state: %s.',\n      Date(), process.pid, worker.process.pid, worker.suicide, worker.state);\n  }).on('exit', function (worker, code, signal) {\n    var exitCode = worker.process.exitCode;\n    var err = new Error(util.format('worker %s died (code: %s, signal: %s, suicide: %s, state: %s)',\n      worker.process.pid, exitCode, signal, worker.suicide, worker.state));\n    err.name = 'WorkerDiedError';\n    console.error('[%s] [master:%s] wroker exit: %s', Date(), process.pid, err.stack);\n  });\n}\n\nfunction forkSyncer() {\n  var syncer = childProcess.fork(syncPath);\n  syncer.on('exit', function (code, signal) {\n    var err = new Error(util.format('syncer %s died (code: %s, signal: %s, stdout: %s, stderr: %s)',\n      syncer.pid, code, signal, syncer.stdout, syncer.stderr));\n    err.name = 'SyncerWorkerDiedError';\n    console.error('[%s] [master:%s] syncer exit: %s: %s',\n      Date(), process.pid, err.name, err.message);\n    setTimeout(forkSyncer, 1000);\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/worker.js":"'use strict';\n\nvar graceful = require('graceful');\nvar registry = require('./servers/registry');\nvar web = require('./servers/web');\nvar logger = require('./common/logger');\nvar config = require('./config');\n\nregistry.listen(config.registryPort, config.bindingHost);\nweb.listen(config.webPort, config.bindingHost);\n\nconsole.log('[%s] [worker:%d] Server started, registry server listen at %s:%d, web listen at %s:%d, cluster: %s',\n  new Date(), process.pid,\n  config.bindingHost, config.registryPort,\n  config.bindingHost, config.webPort,\n  config.enableCluster);\n\ngraceful({\n  server: [registry, web],\n  error: function (err, throwErrorCount) {\n    if (err.message) {\n      err.message += ' (uncaughtException throw ' + throwErrorCount + ' times on pid:' + process.pid + ')';\n    }\n    console.error(err);\n    console.error(err.stack);\n    logger.error(err);\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/servers/registry.js":"'use strict';\n\nvar koa = require('koa');\nvar app = module.exports = koa();\nvar http = require('http');\nvar middlewares = require('koa-middlewares');\nvar routes = require('../routes/registry');\nvar logger = require('../common/logger');\nvar config = require('../config');\nvar block = require('../middleware/block');\nvar auth = require('../middleware/auth');\nvar staticCache = require('../middleware/static');\nvar notFound = require('../middleware/registry_not_found');\nvar cors = require('kcors');\nvar proxyToNpm = require('../middleware/proxy_to_npm');\nvar maxrequests = require('koa-maxrequests');\n\napp.use(maxrequests());\napp.use(block());\nmiddlewares.jsonp(app);\napp.use(middlewares.rt({ headerName: 'X-ReadTime' }));\napp.use(middlewares.rewrite('/favicon.ico', '/favicon.png'));\napp.use(staticCache);\n\napp.keys = ['todokey', config.sessionSecret];\napp.proxy = true;\napp.use(middlewares.bodyParser({ jsonLimit: config.jsonLimit }));\napp.use(cors({\n  allowMethods: 'GET,HEAD',\n}));\napp.use(auth());\napp.use(proxyToNpm());\napp.use(notFound);\n\nif (config.enableCompress) {\n  app.use(middlewares.compress({ threshold: 150 }));\n}\napp.use(middlewares.conditional());\napp.use(middlewares.etag());\n\n/**\n * Routes\n */\n\napp.use(middlewares.router(app));\nroutes(app);\n\n/**\n * Error handler\n */\n\napp.on('error', function (err, ctx) {\n  console.log(err);\n  console.log(err.stack);\n  err.url = err.url || ctx.request.url;\n  logger.error(err);\n});\n\napp = http.createServer(app.callback());\n\nif (!module.parent) {\n  app.listen(config.registryPort);\n}\n\nmodule.exports = app;\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/routes/registry.js":"'use strict';\n\nvar limit = require('../middleware/limit');\nvar login = require('../middleware/login');\nvar publishable = require('../middleware/publishable');\nvar syncByInstall = require('../middleware/sync_by_install');\nvar editable = require('../middleware/editable');\nvar existsPackage = require('../middleware/exists_package');\nvar unpublishable = require('../middleware/unpublishable');\n\nvar showTotal = require('../controllers/total');\n\nvar listAll = require('../controllers/registry/package/list_all');\nvar listShorts = require('../controllers/registry/package/list_shorts');\nvar listSince = require('../controllers/registry/package/list_since');\nvar listAllVersions = require('../controllers/registry/package/list');\nvar listDependents = require('../controllers/registry/package/list_dependents');\nvar getOneVersion = require('../controllers/registry/package/show');\nvar savePackage = require('../controllers/registry/package/save');\nvar tag = require('../controllers/registry/package/tag');\nvar removePackage = require('../controllers/registry/package/remove');\nvar removeOneVersion = require('../controllers/registry/package/remove_version');\nvar updatePackage = require('../controllers/registry/package/update');\nvar downloadPackage = require('../controllers/registry/package/download');\nvar downloadTotal = require('../controllers/registry/package/download_total');\nvar listPackagesByUser = require('../controllers/registry/package/list_by_user');\n\nvar addUser = require('../controllers/registry/user/add');\nvar showUser = require('../controllers/registry/user/show');\nvar updateUser = require('../controllers/registry/user/update');\n\nvar sync = require('../controllers/sync');\nvar userPackage = require('../controllers/registry/user_package');\nvar tags = require('../controllers/registry/package/dist_tag');\n\nfunction routes(app) {\n\n  function* jsonp(next) {\n    yield* next;\n    if (this.body) {\n      this.jsonp = this.body;\n    }\n  }\n\n  app.get('/', jsonp, showTotal);\n\n  // before /:name/:version\n  // get all modules, for npm search\n  app.get('/-/all', listAll);\n  app.get('/-/all/since', listSince);\n  // get all module names, for auto completion\n  app.get('/-/short', listShorts);\n\n  // module\n  // scope package: params: [$name]\n  app.get(/^\\/(@[\\w\\-\\.]+\\/[^\\/]+)$/, syncByInstall, listAllVersions);\n  // scope package: params: [$name, $version]\n  app.get(/^\\/(@[\\w\\-\\.]+\\/[\\w\\-\\.]+)\\/([^\\/]+)$/, syncByInstall, getOneVersion);\n\n  app.get('/:name', syncByInstall, listAllVersions);\n  app.get('/:name/:version', syncByInstall, getOneVersion);\n\n  // try to add module\n  app.put(/^\\/(@[\\w\\-\\.]+\\/[\\w\\-\\.]+)$/, login, publishable, savePackage);\n  app.put('/:name', login, publishable, savePackage);\n\n  // sync from source npm\n  app.put(/^\\/(@[\\w\\-\\.]+\\/[\\w\\-\\.]+)\\/sync$/, sync.sync);\n  app.put('/:name/sync', sync.sync);\n  app.get(/^\\/(@[\\w\\-\\.]+\\/[\\w\\-\\.]+)\\/sync\\/log\\/(\\d+)$/, sync.getSyncLog);\n  app.get('/:name/sync/log/:id', sync.getSyncLog);\n\n  // add tag\n  app.put(/^\\/(@[\\w\\-\\.]+\\/[\\w\\-\\.]+)\\/([\\w\\-\\.]+)$/, login, editable, tag);\n  app.put('/:name/:tag', login, editable, tag);\n\n  // need limit by ip\n  app.get(/^\\/(@[\\w\\-\\.]+\\/[\\w\\-\\.]+)\\/download\\/(@[\\w\\-\\.]+\\/[\\w\\-\\.]+)$/, limit, downloadPackage);\n  app.get('/:name/download/:filename', limit, downloadPackage);\n  app.get(/^\\/(@[\\w\\-\\.]+\\/[\\w\\-\\.]+)\\/\\-\\/(@[\\w\\-\\.]+\\/[\\w\\-\\.]+)$/, limit, downloadPackage);\n  app.get('/:name/-/:filename', limit, downloadPackage);\n\n  // delete tarball and remove one version\n  app.delete(/^\\/(@[\\w\\-\\.]+\\/[\\w\\-\\.]+)\\/download\\/(@[\\w\\-\\.]+\\/[\\w\\-\\.]+)\\/\\-rev\\/([\\w\\-\\.]+)$/,\n    login, unpublishable, removeOneVersion);\n  app.delete('/:name/download/:filename/-rev/:rev', login, unpublishable, removeOneVersion);\n\n  // update module, unpublish will PUT this\n  app.put(/^\\/(@[\\w\\-\\.]+\\/[\\w\\-\\.]+)\\/\\-rev\\/([\\w\\-\\.]+)$/, login, publishable, editable, updatePackage);\n  app.put('/:name/-rev/:rev', login, publishable, editable, updatePackage);\n\n  // remove all versions\n  app.delete(/^\\/(@[\\w\\-\\.]+\\/[\\w\\-\\.]+)\\/\\-rev\\/([\\w\\-\\.]+)$/, login, unpublishable, removePackage);\n  app.delete('/:name/-rev/:rev', login, unpublishable, removePackage);\n\n  // try to create a new user\n  // https://registry.npmjs.org/-/user/org.couchdb.user:fengmk2\n  app.put('/-/user/org.couchdb.user::name', addUser);\n  app.get('/-/user/org.couchdb.user::name', showUser);\n  app.put('/-/user/org.couchdb.user::name/-rev/:rev', login, updateUser);\n\n  // list all packages of user\n  app.get('/-/by-user/:user', userPackage.list);\n  app.get('/-/users/:user/packages', listPackagesByUser);\n\n  // download times\n  app.get('/downloads/range/:range/:name', downloadTotal);\n  app.get(/^\\/downloads\\/range\\/([^\\/]+)\\/(@[\\w\\-\\.]+\\/[\\w\\-\\.]+)$/, downloadTotal);\n  app.get('/downloads/range/:range', downloadTotal);\n\n  // GET /-/package/:pkg/dependents\n  app.get('/-/package/:name/dependents', existsPackage, listDependents);\n  app.get(/^\\/\\-\\/package\\/(@[\\w\\-\\.]+\\/[\\w\\-\\.]+)\\/dependents$/, existsPackage, listDependents);\n\n  // GET /-/package/:pkg/dist-tags -- returns the package's dist-tags\n  app.get('/-/package/:name/dist-tags', existsPackage, tags.index);\n  app.get(/^\\/\\-\\/package\\/(@[\\w\\-\\.]+\\/[\\w\\-\\.]+)\\/dist\\-tags$/, existsPackage, tags.index);\n\n  // PUT /-/package/:pkg/dist-tags -- Set package's dist-tags to provided object body (removing missing)\n  app.put('/-/package/:name/dist-tags', login, existsPackage, editable, tags.save);\n  app.put(/^\\/\\-\\/package\\/(@[\\w\\-\\.]+\\/[\\w\\-\\.]+)\\/dist\\-tags$/, login, existsPackage, editable, tags.save);\n\n  // POST /-/package/:pkg/dist-tags -- Add/modify dist-tags from provided object body (merge)\n  app.post('/-/package/:name/dist-tags', login, existsPackage, editable, tags.update);\n  app.post(/^\\/\\-\\/package\\/(@[\\w\\-\\.]+\\/[\\w\\-\\.]+)\\/dist\\-tags$/, login, existsPackage, editable, tags.update);\n\n  // PUT /-/package/:pkg/dist-tags/:tag -- Set package's dist-tags[tag] to provided string body\n  app.put('/-/package/:name/dist-tags/:tag', login, existsPackage, editable, tags.set);\n  app.put(/^\\/\\-\\/package\\/(@[\\w\\-\\.]+\\/[\\w\\-\\.]+)\\/dist\\-tags\\/([\\w\\-\\.]+)$/, login, existsPackage, editable, tags.set);\n  // POST /-/package/:pkg/dist-tags/:tag -- Same as PUT /-/package/:pkg/dist-tags/:tag\n  app.post('/-/package/:name/dist-tags/:tag', login, existsPackage, editable, tags.set);\n\n  // DELETE /-/package/:pkg/dist-tags/:tag -- Remove tag from dist-tags\n  app.delete('/-/package/:name/dist-tags/:tag', login, existsPackage, editable, tags.destroy);\n  app.delete(/^\\/\\-\\/package\\/(@[\\w\\-\\.]+\\/[\\w\\-\\.]+)\\/dist\\-tags\\/([\\w\\-\\.]+)$/, login, existsPackage, editable, tags.destroy);\n}\n\nmodule.exports = routes;\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/middleware/limit.js":"/**!\n * cnpmjs.org - middleware/limit.js\n *\n * Copyright(c) cnpmjs.org and other contributors.\n * MIT Licensed\n *\n * Authors:\n *  dead_horse <dead_horse@qq.com> (http://deadhorse.me)\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar config = require('../config');\nvar limit = require('koa-limit');\n\nvar limitConfig = config.limit;\n\nif (!limitConfig.enable) {\n  module.exports = function *ignoreLimit(next) {\n    yield *next;\n  };\n} else {\n  module.exports = limit(limitConfig);\n}\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/middleware/login.js":"/*!\n * cnpmjs.org - middleware/login.js\n *\n * Copyright(c) cnpmjs.org and other contributors.\n * MIT Licensed\n *\n * Authors:\n *  fengmk2 <fengmk2@gmail.com> (http://fengmk2.github.com)\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar http = require('http');\n\nmodule.exports = function *login(next) {\n  if (this.user.error) {\n    var status = this.user.error.status;\n    this.status = http.STATUS_CODES[status]\n      ? status\n      : 500;\n\n    this.body = {\n      error: this.user.error.name,\n      reason: this.user.error.message\n    };\n    return;\n  }\n\n  if (!this.user.name) {\n    this.status = 401;\n    this.body = {\n      error: 'unauthorized',\n      reason: 'Login first'\n    };\n    return;\n  }\n  yield *next;\n};\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/middleware/publishable.js":"/**!\n * cnpmjs.org - middleware/publishable.js\n *\n * Copyright(c) cnpmjs.org and other contributors.\n * MIT Licensed\n *\n * Authors:\n *  fengmk2 <fengmk2@gmail.com> (http://fengmk2.github.com)\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar util = require('util');\nvar config = require('../config');\nvar debug = require('debug')('cnpmjs.org:middlewares/publishable');\n\nmodule.exports = function *publishable(next) {\n  // admins always can publish and unpublish\n  if (this.user.isAdmin) {\n    return yield next;\n  }\n\n  // private mode, normal user can't publish and unpublish\n  if (config.enablePrivate) {\n    this.status = 403;\n    this.body = {\n      error: 'no_perms',\n      reason: 'Private mode enable, only admin can publish this module'\n    };\n    return;\n  }\n\n  // public mode, normal user have permission to publish `scoped package`\n  // and only can publish with scopes in `ctx.user.scopes`, default is `config.scopes`\n\n  var name = this.params.name || this.params[0];\n\n  // check if is private package list in config\n  if (config.privatePackages && config.privatePackages.indexOf(name) !== -1) {\n    return yield next;\n  }\n\n  // scoped module\n  if (name[0] === '@') {\n    if (checkScope(name, this)) {\n      return yield next;\n    }\n    return;\n  }\n\n  // none-scope\n  assertNoneScope(name, this);\n};\n\n/**\n * check module's scope legal\n */\n\nfunction checkScope(name, ctx) {\n  if (!ctx.user.scopes || !ctx.user.scopes.length) {\n    ctx.status = 404;\n    return false;\n  }\n\n  var scope = name.split('/')[0];\n  if (ctx.user.scopes.indexOf(scope) === -1) {\n    debug('assert scope  %s error', name);\n    ctx.status = 400;\n    ctx.body = {\n      error: 'invalid scope',\n      reason: util.format('scope %s not match legal scopes: %s', scope, ctx.user.scopes.join(', '))\n    };\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * check if user have permission to publish without scope\n */\n\nfunction assertNoneScope(name, ctx) {\n  ctx.status = 403;\n  if (ctx.user.scopes.length === 0) {\n    ctx.body = {\n      error: 'no_perms',\n      reason: 'can\\'t publish non-scoped package, please set `config.scopes`'\n    };\n    return;\n  }\n\n  ctx.body = {\n    error: 'no_perms',\n    reason: 'only allow publish with ' + ctx.user.scopes.join(', ') + ' scope(s)'\n  };\n}\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/middleware/sync_by_install.js":"/**\n * Copyright(c) cnpm and other contributors.\n * MIT Licensed\n *\n * Authors:\n *  dead_horse <dead_horse@qq.com> (http://deadhorse.me)\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar config = require('../config');\n\n/**\n * {Boolean} this.allowSync  -  allow sync triggle by cnpm install\n */\n\nmodule.exports = function* syncByInstall(next) {\n  this.allowSync = false;\n  if (!config.syncByInstall) {\n    // only config.enablePrivate should enable sync on install\n    return yield next;\n  }\n  // request not by node, consider it request from web, don't sync\n  var ua = this.get('user-agent');\n  if (!ua || ua.indexOf('node') < 0) {\n    return yield next;\n  }\n\n  // if request with `/xxx?write=true`, meaning the read request using for write, don't sync\n  if (this.query.write) {\n    return yield next;\n  }\n\n  var name = this.params.name || this.params[0];\n\n  // private scoped package don't sync\n  if (name && name[0] === '@') {\n    var scope = name.split('/')[0];\n    if (config.scopes.indexOf(scope) >= 0) {\n      return yield next;\n    }\n  }\n\n  this.allowSync = true;\n  yield next;\n};\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/middleware/editable.js":"/**!\n * cnpmjs.org - middleware/editable.js\n *\n * Copyright(c) fengmk2 and other contributors.\n * MIT Licensed\n *\n * Authors:\n *   fengmk2 <fengmk2@gmail.com> (http://fengmk2.github.com)\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar packageService = require('../services/package');\n\n// admin or module's maintainer can modified the module\nmodule.exports = function* editable(next) {\n  var username = this.user && this.user.name;\n  var moduleName = this.params.name || this.params[0];\n  if (username && moduleName) {\n    if (this.user.isAdmin) {\n      return yield* next;\n    }\n    var isMaintainer = yield* packageService.isMaintainer(moduleName, username);\n    if (isMaintainer) {\n      return yield* next;\n    }\n  }\n\n  this.status = 403;\n  var message = 'not authorized to modify ' + moduleName;\n  if (username) {\n    message = username + ' ' + message;\n  }\n  this.body = {\n    error: 'forbidden user',\n    reason: message\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/services/package.js":"'use strict';\n\nvar semver = require('semver');\nvar models = require('../models');\nvar common = require('./common');\nvar Tag = models.Tag;\nvar User = models.User;\nvar Module = models.Module;\nvar ModuleStar = models.ModuleStar;\nvar ModuleKeyword = models.ModuleKeyword;\nvar PrivateModuleMaintainer = models.ModuleMaintainer;\nvar ModuleDependency = models.ModuleDependency;\nvar ModuleUnpublished = models.ModuleUnpublished;\nvar NpmModuleMaintainer = models.NpmModuleMaintainer;\n\n// module\nvar _parseRow = function (row) {\n  if (row.package.indexOf('%7B%22') === 0) {\n    // now store package will encodeURIComponent() after JSON.stringify\n    row.package = decodeURIComponent(row.package);\n  }\n  row.package = JSON.parse(row.package);\n  if (typeof row.publish_time === 'string') {\n    // pg bigint is string\n    row.publish_time = Number(row.publish_time);\n  }\n};\n\n// module:read\nfunction parseRow(row) {\n  if (row && row.package) {\n    try {\n      _parseRow(row);\n    } catch (e) {\n      console.warn('parse package error: %s, id: %s version: %s, error: %s', row.name, row.id, row.version, e);\n    }\n  }\n}\nexports.parseRow = parseRow;\n\nfunction stringifyPackage(pkg) {\n  return encodeURIComponent(JSON.stringify(pkg));\n}\n\nexports.getModuleById = function* (id) {\n  var row = yield Module.findById(Number(id));\n  parseRow(row);\n  return row;\n};\n\nexports.getModule = function* (name, version) {\n  var row = yield* Module.findByNameAndVersion(name, version);\n  parseRow(row);\n  return row;\n};\n\nexports.getModuleByTag = function* (name, tag) {\n  var tag = yield* Tag.findByNameAndTag(name, tag);\n  if (!tag) {\n    return null;\n  }\n  return yield* exports.getModule(tag.name, tag.version);\n};\n\nexports.getModuleByRange = function* (name, range) {\n  var rows = yield exports.listModulesByName(name, [ 'id', 'version' ]);\n  var versionMap = {};\n  var versions = rows.map(function(row) {\n    versionMap[row.version] = row;\n    return row.version;\n  }).filter(function(version) {\n    return semver.valid(version);\n  });\n\n  var version = semver.maxSatisfying(versions, range);\n  if (!versionMap[version]) {\n    return null;\n  }\n\n  var id = versionMap[version].id;\n  return yield exports.getModuleById(id);\n};\n\nexports.getLatestModule = function* (name) {\n  return yield* exports.getModuleByTag(name, 'latest');\n};\n\n// module:list\n\nexports.listPrivateModulesByScope = function* (scope) {\n  var tags = yield Tag.findAll({\n    where: {\n      tag: 'latest',\n      name: {\n        like: scope + '/%'\n      }\n    }\n  });\n\n  if (tags.length === 0) {\n    return [];\n  }\n\n  var ids = tags.map(function (tag) {\n    return tag.module_id;\n  });\n\n  return yield Module.findAll({\n    where: {\n      id: ids\n    }\n  });\n};\n\nexports.listModules = function* (names) {\n  if (names.length === 0) {\n    return [];\n  }\n\n  // fetch latest module tags\n  var tags = yield Tag.findAll({\n    where: {\n      name: names,\n      tag: 'latest'\n    }\n  });\n  if (tags.length === 0) {\n    return [];\n  }\n\n  var ids = tags.map(function (tag) {\n    return tag.module_id;\n  });\n\n  var rows = yield Module.findAll({\n    where: {\n      id: ids\n    },\n    attributes: [\n      'name', 'description', 'version',\n    ]\n  });\n  return rows;\n};\n\nexports.listModulesByUser = function* (username) {\n  var names = yield* exports.listModuleNamesByUser(username);\n  return yield* exports.listModules(names);\n};\n\nexports.listModuleNamesByUser = function* (username) {\n  var sql = 'SELECT distinct(name) AS name FROM module WHERE author=?;';\n  var rows = yield* models.query(sql, [username]);\n  var map = {};\n  var names = rows.map(function (r) {\n    return r.name;\n  });\n\n  // find from npm module maintainer table\n  var moduleNames = yield* NpmModuleMaintainer.listModuleNamesByUser(username);\n  moduleNames.forEach(function (name) {\n    if (!map[name]) {\n      names.push(name);\n    }\n  });\n\n  // find from private module maintainer table\n  moduleNames = yield* PrivateModuleMaintainer.listModuleNamesByUser(username);\n  moduleNames.forEach(function (name) {\n    if (!map[name]) {\n      names.push(name);\n    }\n  });\n  return names;\n};\n\nexports.listPublicModulesByUser = function* (username) {\n  var names = yield* exports.listPublicModuleNamesByUser(username);\n  return yield* exports.listModules(names);\n};\n\n// return user all public package names\nexports.listPublicModuleNamesByUser = function* (username) {\n  var sql = 'SELECT distinct(name) AS name FROM module WHERE author=?;';\n  var rows = yield* models.query(sql, [username]);\n  var map = {};\n  var names = rows.map(function (r) {\n    return r.name;\n  }).filter(function (name) {\n    var matched = name[0] !== '@';\n    if (matched) {\n      map[name] = 1;\n    }\n    return matched;\n  });\n\n  // find from npm module maintainer table\n  var moduleNames = yield* NpmModuleMaintainer.listModuleNamesByUser(username);\n  moduleNames.forEach(function (name) {\n    if (!map[name]) {\n      names.push(name);\n    }\n  });\n  return names;\n};\n\n// start must be a date or timestamp\nexports.listPublicModuleNamesSince = function* listPublicModuleNamesSince(start) {\n  if (!(start instanceof Date)) {\n    start = new Date(Number(start));\n  }\n  var rows = yield Tag.findAll({\n    attributes: ['name'],\n    where: {\n      gmt_modified: {\n        gt: start\n      }\n    },\n  });\n  var names = {};\n  for (var i = 0; i < rows.length; i++) {\n    names[rows[i].name] = 1;\n  }\n  return Object.keys(names);\n};\n\nexports.listAllPublicModuleNames = function* () {\n  var sql = 'SELECT DISTINCT(name) AS name FROM tag ORDER BY name';\n  var rows = yield models.query(sql);\n  return rows.filter(function (row) {\n    return !common.isPrivatePackage(row.name);\n  }).map(function (row) {\n    return row.name;\n  });\n};\n\nexports.listModulesByName = function* (moduleName, attributes) {\n  var mods = yield Module.findAll({\n    where: {\n      name: moduleName\n    },\n    order: [ ['id', 'DESC'] ],\n    attributes,\n  });\n\n  for (var mod of mods) {\n    parseRow(mod);\n  }\n  return mods;\n};\n\nexports.getModuleLastModified = function* (name) {\n  var mod = yield Module.find({\n    where: {\n      name: name,\n    },\n    order: [\n      ['gmt_modified', 'DESC']\n    ],\n    attributes: [ 'gmt_modified' ]\n  });\n  return mod && mod.gmt_modified || null;\n};\n\n// module:update\nexports.saveModule = function* (mod) {\n  var keywords = mod.package.keywords;\n  if (typeof keywords === 'string') {\n    keywords = [keywords];\n  }\n  var pkg = stringifyPackage(mod.package);\n  var description = mod.package && mod.package.description || '';\n  var dist = mod.package.dist || {};\n  // dist.tarball = '';\n  // dist.shasum = '';\n  // dist.size = 0;\n  var publish_time = mod.publish_time || Date.now();\n  var item = yield* Module.findByNameAndVersion(mod.name, mod.version);\n  if (!item) {\n    item = Module.build({\n      name: mod.name,\n      version: mod.version\n    });\n  }\n  item.publish_time = publish_time;\n  // meaning first maintainer, more maintainers please check module_maintainer table\n  item.author = mod.author;\n  item.package = pkg;\n  item.dist_tarball = dist.tarball;\n  item.dist_shasum = dist.shasum;\n  item.dist_size = dist.size;\n  item.description = description;\n\n  if (item.changed()) {\n    item = yield item.save();\n  }\n  var result = {\n    id: item.id,\n    gmt_modified: item.gmt_modified\n  };\n\n  if (!Array.isArray(keywords)) {\n    return result;\n  }\n\n  var words = [];\n  for (var i = 0; i < keywords.length; i++) {\n    var w = keywords[i];\n    if (typeof w === 'string') {\n      w = w.trim();\n      if (w) {\n        words.push(w);\n      }\n    }\n  }\n\n  if (words.length > 0) {\n    // add keywords\n    yield* exports.addKeywords(mod.name, description, words);\n  }\n\n  return result;\n};\n\nexports.updateModulePackage = function* (id, pkg) {\n  var mod = yield Module.findById(Number(id));\n  if (!mod) {\n    // not exists\n    return null;\n  }\n  mod.package = stringifyPackage(pkg);\n  return yield mod.save(['package']);\n};\n\nexports.updateModulePackageFields = function* (id, fields) {\n  var mod = yield exports.getModuleById(id);\n  if (!mod) {\n    return null;\n  }\n  var pkg = mod.package || {};\n  for (var k in fields) {\n    pkg[k] = fields[k];\n  }\n  return yield exports.updateModulePackage(id, pkg);\n};\n\nexports.updateModuleReadme = function* (id, readme) {\n  var mod = yield* exports.getModuleById(id);\n  if (!mod) {\n    return null;\n  }\n  var pkg = mod.package || {};\n  pkg.readme = readme;\n  return yield* exports.updateModulePackage(id, pkg);\n};\n\nexports.updateModuleDescription = function* (id, description) {\n  var mod = yield* exports.getModuleById(id);\n  if (!mod) {\n    return null;\n  }\n  mod.description = description;\n  // also need to update package.description\n  var pkg = mod.package || {};\n  pkg.description = description;\n  mod.package = stringifyPackage(pkg);\n\n  return yield mod.save(['description', 'package']);\n};\n\nexports.updateModuleLastModified = function* (name) {\n  var row = yield Module.find({\n    where: { name: name },\n    order: [ [ 'gmt_modified', 'DESC' ] ],\n  });\n  if (!row) {\n    return null;\n  }\n  // gmt_modified is readonly, we must use setDataValue\n  row.setDataValue('gmt_modified', new Date());\n  return yield row.save();\n};\n\nexports.removeModulesByName = function* (name) {\n  yield Module.destroy({\n    where: {\n      name: name\n    }\n  });\n};\n\nexports.removeModulesByNameAndVersions = function* (name, versions) {\n  yield Module.destroy({\n    where: {\n      name: name,\n      version: versions\n    }\n  });\n};\n\n// tags\n\nexports.addModuleTag = function* (name, tag, version) {\n  var mod = yield* exports.getModule(name, version);\n  if (!mod) {\n    return null;\n  }\n\n  var row = yield* Tag.findByNameAndTag(name, tag);\n  if (!row) {\n    row = Tag.build({\n      name: name,\n      tag: tag\n    });\n  }\n  row.module_id = mod.id;\n  row.version = version;\n  if (row.changed()) {\n    return yield row.save();\n  }\n  return row;\n};\n\nexports.getModuleTag = function* (name, tag) {\n  return yield Tag.findByNameAndTag(name, tag);\n};\n\nexports.removeModuleTags = function* (name) {\n  return yield Tag.destroy({where: {name: name}});\n};\n\nexports.removeModuleTagsByIds = function* (ids) {\n  return yield Tag.destroy({where: {id: ids}});\n};\n\nexports.removeModuleTagsByNames = function* (moduleName, tagNames) {\n  return yield Tag.destroy({\n    where: {\n      name: moduleName,\n      tag: tagNames\n    }\n  });\n};\n\nexports.listModuleTags = function* (name) {\n  return yield Tag.findAll({ where: { name: name } });\n};\n\n// dependencies\n\n// name => dependency\nexports.addDependency = function* (name, dependency) {\n  var row = yield ModuleDependency.find({\n    where: {\n      name: dependency,\n      dependent: name\n    }\n  });\n  if (row) {\n    return row;\n  }\n  return yield ModuleDependency.build({\n    name: dependency,\n    dependent: name\n  }).save();\n};\n\nexports.addDependencies = function* (name, dependencies) {\n  var tasks = [];\n  for (var i = 0; i < dependencies.length; i++) {\n    tasks.push(exports.addDependency(name, dependencies[i]));\n  }\n  return yield tasks;\n};\n\nexports.listDependents = function* (dependency) {\n  var items = yield ModuleDependency.findAll({\n    where: {\n      name: dependency\n    }\n  });\n  return items.map(function (item) {\n    return item.dependent;\n  });\n};\n\n// maintainers\n\nexports.listPublicModuleMaintainers = function* (name) {\n  return yield* NpmModuleMaintainer.listMaintainers(name);\n};\n\nexports.addPublicModuleMaintainer = function* (name, user) {\n  return yield* NpmModuleMaintainer.addMaintainer(name, user);\n};\n\nexports.removePublicModuleMaintainer = function* (name, user) {\n  return yield* NpmModuleMaintainer.removeMaintainers(name, user);\n};\n\n// only can add to cnpm maintainer table\nexports.addPrivateModuleMaintainers = function* (name, usernames) {\n  return yield* PrivateModuleMaintainer.addMaintainers(name, usernames);\n};\n\nexports.updatePrivateModuleMaintainers = function* (name, usernames) {\n  var result = yield* PrivateModuleMaintainer.updateMaintainers(name, usernames);\n  if (result.add.length > 0 || result.remove.length > 0) {\n    yield* exports.updateModuleLastModified(name);\n  }\n  return result;\n};\n\nfunction* getMaintainerModel(name) {\n  return common.isPrivatePackage(name) ? PrivateModuleMaintainer : NpmModuleMaintainer;\n}\n\nexports.listMaintainers = function* (name) {\n  var mod = yield* getMaintainerModel(name);\n  var usernames = yield* mod.listMaintainers(name);\n  if (usernames.length === 0) {\n    return usernames;\n  }\n  var users = yield* User.listByNames(usernames);\n  return users.map(function (user) {\n    return {\n      name: user.name,\n      email: user.email\n    };\n  });\n};\n\nexports.listMaintainerNamesOnly = function* (name) {\n  var mod = yield* getMaintainerModel(name);\n  return yield* mod.listMaintainers(name);\n};\n\nexports.removeAllMaintainers = function* (name) {\n  return yield [\n    PrivateModuleMaintainer.removeAllMaintainers(name),\n    NpmModuleMaintainer.removeAllMaintainers(name),\n  ];\n};\n\nexports.authMaintainer = function* (packageName, username) {\n  var mod = yield* getMaintainerModel(packageName);\n  var rs = yield [\n    mod.listMaintainers(packageName),\n    exports.getLatestModule(packageName)\n  ];\n  var maintainers = rs[0];\n  var latestMod = rs[1];\n  if (maintainers.length === 0) {\n    // if not found maintainers, try to get from latest module package info\n    var ms = latestMod && latestMod.package && latestMod.package.maintainers;\n    if (ms && ms.length > 0) {\n      maintainers = ms.map(function (user) {\n        return user.name;\n      });\n    }\n  }\n\n  var isMaintainer = false;\n  if (latestMod && !latestMod.package._publish_on_cnpm) {\n    // no one can update public package maintainers\n    // public package only sync from source npm registry\n    isMaintainer = false;\n  } else if (maintainers.length === 0) {\n    // no maintainers, meaning this module is free for everyone\n    isMaintainer = true;\n  } else if (maintainers.indexOf(username) >= 0) {\n    isMaintainer = true;\n  }\n\n  return {\n    isMaintainer: isMaintainer,\n    maintainers: maintainers\n  };\n};\n\nexports.isMaintainer = function* (name, username) {\n  var result = yield* exports.authMaintainer(name, username);\n  return result.isMaintainer;\n};\n\n// module keywords\n\nexports.addKeyword = function* (data) {\n  var item = yield ModuleKeyword.findByKeywordAndName(data.keyword, data.name);\n  if (!item) {\n    item = ModuleKeyword.build(data);\n  }\n  item.description = data.description;\n  if (item.changed()) {\n    // make sure object will change, otherwise will cause empty sql error\n    // @see https://github.com/cnpm/cnpmjs.org/issues/533\n    return yield item.save();\n  }\n  return item;\n};\n\nexports.addKeywords = function* (name, description, keywords) {\n  var tasks = [];\n  keywords.forEach(function (keyword) {\n    tasks.push(exports.addKeyword({\n      name: name,\n      keyword: keyword,\n      description: description\n    }));\n  });\n  return yield tasks;\n};\n\n// search\n\nexports.search = function* (word, options) {\n  options = options || {};\n  var limit = options.limit || 100;\n  word = word.replace(/^%/, ''); //ignore prefix %\n\n  // search flows:\n  // 1. prefix search by name\n  // 2. like search by name\n  // 3. keyword equal search\n  var ids = {};\n\n  var sql = 'SELECT module_id FROM tag WHERE LOWER(name) LIKE LOWER(?) AND tag=\\'latest\\' \\\n    ORDER BY name LIMIT ?;';\n  var rows = yield* models.query(sql, [word + '%', limit ]);\n  for (var i = 0; i < rows.length; i++) {\n    ids[rows[i].module_id] = 1;\n  }\n\n  if (rows.length < 20) {\n    rows = yield* models.query(sql, [ '%' + word + '%', limit ]);\n    for (var i = 0; i < rows.length; i++) {\n      ids[rows[i].module_id] = 1;\n    }\n  }\n\n  var keywordRows = yield ModuleKeyword.findAll({\n    attributes: [ 'name', 'description' ],\n    where: {\n      keyword: word\n    },\n    limit: limit,\n    order: [ [ 'id', 'DESC' ] ]\n  });\n\n  var data = {\n    keywordMatchs: keywordRows,\n    searchMatchs: []\n  };\n\n  ids = Object.keys(ids);\n  if (ids.length > 0) {\n    data.searchMatchs = yield Module.findAll({\n      attributes: [ 'name', 'description' ],\n      where: {\n        id: ids\n      },\n      order: 'name'\n    });\n  }\n\n  return data;\n};\n\n// module star\n\nexports.addStar = function* add(name, user) {\n  var row = yield ModuleStar.find({\n    where: {\n      name: name,\n      user: user\n    }\n  });\n  if (row) {\n    return row;\n  }\n\n  row = ModuleStar.build({\n    name: name,\n    user: user\n  });\n  return yield row.save();\n};\n\nexports.removeStar = function* (name, user) {\n  return yield ModuleStar.destroy({\n    where: {\n      name: name,\n      user: user\n    }\n  });\n};\n\nexports.listStarUserNames = function* (moduleName) {\n  var rows = yield ModuleStar.findAll({\n    where: {\n      name: moduleName\n    }\n  });\n  return rows.map(function (row) {\n    return row.user;\n  });\n};\n\nexports.listUserStarModuleNames = function* (user) {\n  var rows = yield ModuleStar.findAll({\n    where: {\n      user: user\n    }\n  });\n  return rows.map(function (row) {\n    return row.name;\n  });\n};\n\n// unpublish info\nexports.saveUnpublishedModule = function* (name, pkg) {\n  return yield* ModuleUnpublished.save(name, pkg);\n};\n\nexports.getUnpublishedModule = function* (name) {\n  return yield* ModuleUnpublished.findByName(name);\n};\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/models/index.js":"/**!\n * Copyright(c) fengmk2 and other contributors.\n * MIT Licensed\n *\n * Authors:\n *   fengmk2 <fengmk2@gmail.com> (http://fengmk2.com)\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar path = require('path');\nvar sequelize = require('../common/sequelize');\n\nfunction load(name) {\n  return sequelize.import(path.join(__dirname, name));\n}\n\nmodule.exports = {\n  sequelize: sequelize,\n  Module: load('module'),\n  ModuleLog: load('module_log'),\n  ModuleStar: load('module_star'),\n  ModuleKeyword: load('module_keyword'),\n  ModuleDependency: load('module_deps'),\n  ModuleMaintainer: load('module_maintainer'),\n  ModuleUnpublished: load('module_unpublished'),\n  NpmModuleMaintainer: load('npm_module_maintainer'),\n\n  Tag: load('tag'),\n  User: load('user'),\n  Total: load('total'),\n  DownloadTotal: load('download_total'),\n\n  query: function* (sql, args) {\n    var options = { replacements: args };\n    var data = yield this.sequelize.query(sql, options);\n    if (/select /i.test(sql)) {\n      return data[0];\n    }\n    return data[1];\n  },\n  queryOne: function* (sql, args) {\n    var rows = yield* this.query(sql, args);\n    return rows && rows[0];\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/common/sequelize.js":"/**!\n * cnpmjs.org - common/sequelize.js\n *\n * Copyright(c) fengmk2 and other contributors.\n * MIT Licensed\n *\n * Authors:\n *   fengmk2 <fengmk2@gmail.com> (http://fengmk2.github.com)\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar Sequelize = require('sequelize');\nvar DataTypes = require('sequelize/lib/data-types');\nvar config = require('../config');\n\nif (config.mysqlServers && config.database.dialect === 'sqlite') {\n  // https://github.com/cnpm/cnpmjs.org/wiki/Migrating-from-1.x-to-2.x\n  // forward compat with old style on 1.x\n  // mysqlServers: [\n  //   {\n  //     host: '127.0.0.1',\n  //     port: 3306,\n  //     user: 'root',\n  //     password: ''\n  //   }\n  // ],\n  // mysqlDatabase: 'cnpmjs_test',\n  // mysqlMaxConnections: 4,\n  // mysqlQueryTimeout: 5000,\n\n  console.warn('[WARNNING] your config.js was too old, please @see https://github.com/cnpm/cnpmjs.org/wiki/Migrating-from-1.x-to-2.x');\n  var server = config.mysqlServers[0];\n  config.database = {\n    db: config.mysqlDatabase,\n    username: server.user,\n    password: server.password,\n    dialect: 'mysql',\n    host: server.host,\n    port: server.port,\n    pool: {\n      maxConnections: config.mysqlMaxConnections || 10,\n      minConnections: 0,\n      maxIdleTime: 30000\n    },\n    logging: !!process.env.SQL_DEBUG,\n  };\n}\n\nvar database = config.database;\n\n// sync database before app start, defaul is false\ndatabase.syncFirst = false;\n\n// add longtext for mysql\nSequelize.LONGTEXT = DataTypes.LONGTEXT = DataTypes.TEXT;\nif (config.dialect === 'mysql') {\n  Sequelize.LONGTEXT = DataTypes.LONGTEXT = 'LONGTEXT';\n}\n\ndatabase.define = {\n  timestamps: true,\n  createdAt: 'gmt_create',\n  updatedAt: 'gmt_modified',\n  charset: 'utf8',\n  collate: 'utf8_general_ci',\n};\n\nvar sequelize = new Sequelize(database.db, database.username, database.password, database);\n\nmodule.exports = sequelize;\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/bin/change_password.js":"\"use strict\";\n// Only support for ./services/DefaultUserService. If you use custom user service, ignore this file.\n// call with:\n// $ node ./bin/change_password.js 'username' 'new_password'\n\nvar UserModel = require('../models').User;\nvar co = require('co');\nvar utility = require('utility');\n\nvar username = process.argv[2];\nvar newPassword = process.argv[3];\n\nco(function * () {\n  var user = yield UserModel.find({where: {name: username}});\n  var salt = user.salt;\n  console.log(`user original password_sha: ${user.password_sha}`);\n  var newPasswordSha = utility.sha1(newPassword + salt);\n  user.password_sha = newPasswordSha;\n  user = yield user.save();\n  console.log(`change user password successful!! user new password_sha: ${user.password_sha}`);\n  process.exit(0);\n}).catch(function (e) {\n  console.log(e);\n});\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/bin/cli.js":"#!/usr/bin/env node\n\n/**!\n * Copyright(c) cnpm and other contributors.\n * MIT Licensed\n *\n * Authors:\n *   fengmk2 <m@fengmk2.com> (http://fengmk2.com)\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar debug = require('debug')('cnpmjs.org:cli');\nvar program = require('commander');\nvar path = require('path');\nvar fs = require('fs');\nvar mkdirp = require('mkdirp');\nvar treekill = require('treekill');\nvar version = require('../package.json').version;\n\nfunction list(val) {\n  return val.split(',');\n}\n\nprogram\n  .version(version);\n\nprogram\n  .command('start')\n  .description('start cnpmjs.org server')\n  .option('--admins <admins>', 'set admins', list)\n  .option('--scopes <scopes>', 'set scopes', list)\n  // .option('--cluster', 'enable cluster mode')\n  .option('--dataDir <dataDir>', 'cnpmjs.org data dir, default is `$HOME/.cnpmjs.org`')\n  .action(start);\n\nprogram\n  .command('stop')\n  .description('stop cnpmjs.org server')\n  .option('--dataDir <dataDir>', 'cnpmjs.org data dir, default is `$HOME/.cnpmjs.org`')\n  .action(stop);\n\nprogram.parse(process.argv);\n\n\nfunction start(options) {\n  stop(options);\n  var dataDir = options.dataDir || path.join(process.env.HOME, '.cnpmjs.org');\n  mkdirp.sync(dataDir);\n\n  var configfile = path.join(dataDir, 'config.json');\n  var config = {};\n  if (fs.existsSync(configfile)) {\n    try {\n      config = require(configfile);\n    } catch (err) {\n      console.warn('load old %s error: %s', configfile, err);\n    }\n  }\n  // config.enableCluster = !!options.cluster;\n  if (options.admins) {\n    config.admins = {};\n    for (var i = 0; i < options.admins.length; i++) {\n      config.admins[options.admins[i]] = options.admins[i] + '@localhost.com';\n    }\n  }\n  if (options.scopes) {\n    config.scopes = options.scopes.map(function (name) {\n      if (name[0] !== '@') {\n        name = '@' + name;\n      }\n      return name;\n    });\n  }\n\n  var configJSON = JSON.stringify(config, null, 2);\n  fs.writeFileSync(configfile, configJSON);\n\n  debug('save config %s to %s', configJSON, configfile);\n\n  // if sqlite db file not exists, init first\n  initDatabase(function() {\n    require('../dispatch');\n  });\n\n  fs.writeFileSync(path.join(dataDir, 'pid'), process.pid + '');\n}\n\nfunction stop(options) {\n  var dataDir = options.dataDir || path.join(process.env.HOME, '.cnpmjs.org');\n  var pidfile = path.join(dataDir, 'pid');\n  if (fs.existsSync(pidfile)) {\n    var pid = Number(fs.readFileSync(pidfile, 'utf8'));\n    treekill(pid, function (err) {\n      if (err) {\n        console.log(err);\n        throw err;\n      }\n      console.log('cnpmjs.org server:%d stop', pid);\n      fs.unlinkSync(pidfile);\n    });\n  }\n}\n\nfunction initDatabase(callback) {\n  var models = require('../models');\n\n  models.sequelize.sync({ force: false })\n    .then(function () {\n      models.Total.init(function (err) {\n        if (err) {\n          console.error('[models/init_script.js] sequelize init fail');\n          console.error(err);\n          throw err;\n        } else {\n          console.log('[models/init_script.js] `sqlite` sequelize sync and init success');\n          callback();\n        }\n      });\n    })\n    .catch(function (err) {\n      console.error('[models/init_script.js] sequelize sync fail');\n      console.error(err);\n      throw err;\n    });\n}\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/common/logger.js":"'use strict';\n\nconst debug = require('debug')('cnpmjs.org:logger');\nconst formater = require('error-formater');\nconst Logger = require('mini-logger');\nconst utility = require('utility');\nconst util = require('util');\nconst os = require('os');\nconst config = require('../config');\nconst mail = require('./mail');\n\nconst isTEST = process.env.NODE_ENV === 'test';\nconst categories = ['sync_info', 'sync_error'];\n\nconst logger = module.exports = Logger({\n  categories: categories,\n  dir: config.logdir,\n  duration: '1d',\n  format: '[{category}.]YYYY-MM-DD[.log]',\n  stdout: config.debug && !isTEST,\n  errorFormater: errorFormater,\n  seperator: os.EOL,\n});\n\nconst to = [];\nfor (var user in config.admins) {\n  to.push(config.admins[user]);\n}\n\nfunction errorFormater(err) {\n  const msg = formater.both(err);\n  mail.error(to, msg.json.name, msg.text);\n  return msg.text;\n}\n\nlogger.syncInfo = function () {\n  const args = [].slice.call(arguments);\n  if (typeof args[0] === 'string') {\n    args[0] = util.format('[%s][%s] ', utility.logDate(), process.pid) + args[0];\n  }\n  if (debug.enabled) {\n    debug.apply(debug, args);\n  }\n  logger.sync_info.apply(logger, args);\n};\n\nlogger.syncError =function () {\n  const args = [].slice.call(arguments);\n  if (typeof args[0] === 'string') {\n    args[0] = util.format('[%s][%s] ', utility.logDate(), process.pid) + args[0];\n  }\n  if (debug.enabled) {\n    debug.apply(debug, args);\n  }\n  logger.sync_error.apply(logger, arguments);\n};\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/common/mail.js":"/**!\n * cnpmjs.org - common/mail.js\n *\n * Copyright(c) cnpmjs.org and other contributors.\n * MIT Licensed\n *\n * Authors:\n *  dead_horse <dead_horse@qq.com> (http://deadhorse.me)\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar nodemailer = require('nodemailer');\nvar utility = require('utility');\nvar os = require('os');\nvar mailConfig = require('../config').mail;\n\nvar smtpConfig;\nif (mailConfig.auth) {\n  // new style\n  smtpConfig = mailConfig;\n} else {\n  smtpConfig = {\n    enable: mailConfig.enable,\n    // backward compat\n    host: mailConfig.host,\n    port: mailConfig.port,\n    secure: mailConfig.secure || mailConfig.ssl,\n    debug: mailConfig.debug,\n    auth: {\n      user: mailConfig.user,\n      pass: mailConfig.pass\n    }\n  };\n}\n\nvar transport;\n\n/**\n * Send notice email with mail level and appname.\n *\n * @param {String|Array} to, email or email list.\n * @param {String} level, e.g.: 'log, warn, error'.\n * @param {String} subject\n * @param {String} html\n * @param {Function(err, result)} callback\n */\nexports.notice = function sendLogMail(to, level, subject, html, callback) {\n  subject = '[' + mailConfig.appname + '] [' + level + '] [' + os.hostname() + '] ' + subject;\n  html = String(html);\n  exports.send(to, subject, html.replace(/\\n/g, '<br/>'), callback);\n};\n\nvar LEVELS = [ 'log', 'warn', 'error' ];\nLEVELS.forEach(function (level) {\n  exports[level] = function (to, subject, html, callback) {\n    exports.notice(to, level, subject, html, callback);\n  };\n});\n\n/**\n * Send email.\n * @param {String|Array} to, email or email list.\n * @param {String} subject\n * @param {String} html\n * @param {Function(err, result)} callback\n */\nexports.send = function (to, subject, html, callback) {\n  callback = callback || utility.noop;\n\n  if (mailConfig.enable === false) {\n    console.log('[send mail debug] [%s] to: %s, subject: %s\\n%s', Date(), to, subject, html);\n    return callback();\n  }\n\n  if (!transport) {\n    transport = nodemailer.createTransport(smtpConfig);\n  }\n\n  var message = {\n    from: mailConfig.from || mailConfig.sender,\n    to: to,\n    subject: subject,\n    html: html,\n  };\n\n  transport.sendMail(message, function (err, result) {\n    callback(err, result);\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/common/markdown.js":"/**!\n * cnpmjs.org - common/markdown.js\n *\n * Copyright(c) fengmk2 and other contributors.\n * MIT Licensed\n *\n * Authors:\n *   fengmk2 <fengmk2@gmail.com> (http://fengmk2.github.com)\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar xss = require('xss');\nvar MarkdownIt = require('markdown-it');\n\n// allow class attr on code\nxss.whiteList.code = ['class'];\n\nvar md = new MarkdownIt({\n  html: true,\n  linkify: true,\n});\n\nexports.render = function (content, filterXss) {\n  var html = md.render(content);\n  if (filterXss !== false) {\n    html = xss(html);\n  }\n  return html;\n};\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/common/nfs.js":"/*!\n * Copyright(c) cnpmjs.org and other contributors.\n * MIT Licensed\n *\n * Authors:\n *  fengmk2 <fengmk2@gmail.com> (http://fengmk2.com)\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar config = require('../config');\n\nmodule.exports = config.nfs;\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/common/urllib.js":"/**!\n * cnpmjs.org - common/urllib.js\n *\n * Copyright(c) fengmk2 and other contributors.\n * MIT Licensed\n *\n * Authors:\n *   fengmk2 <fengmk2@gmail.com> (http://fengmk2.github.com)\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar urlparse = require('url').parse;\nvar urllib = require('urllib');\nvar HttpAgent = require('agentkeepalive');\nvar HttpsAgent = require('agentkeepalive').HttpsAgent;\nvar config = require('../config');\n\nvar httpAgent;\nvar httpsAgent;\n\nif (config.httpProxy) {\n  var tunnel = require('tunnel-agent');\n  var urlinfo = urlparse(config.httpProxy);\n  if (urlinfo.protocol === 'http:') {\n    httpAgent = tunnel.httpOverHttp({\n      proxy: {\n        host: urlinfo.hostname,\n        port: urlinfo.port\n      }\n    });\n    httpsAgent = tunnel.httpsOverHttp({\n      proxy: {\n        host: urlinfo.hostname,\n        port: urlinfo.port\n      }\n    });\n  } else if (urlinfo.protocol === 'https:') {\n    httpAgent = tunnel.httpOverHttps({\n      proxy: {\n        host: urlinfo.hostname,\n        port: urlinfo.port\n      }\n    });\n    httpsAgent = tunnel.httpsOverHttps({\n      proxy: {\n        host: urlinfo.hostname,\n        port: urlinfo.port\n      }\n    });\n  } else {\n    throw new TypeError('httpProxy format error: ' + config.httpProxy);\n  }\n} else {\n  httpAgent = new HttpAgent({\n    timeout: 0,\n    keepAliveTimeout: 15000\n  });\n  httpsAgent = new HttpsAgent({\n    timeout: 0,\n    keepAliveTimeout: 15000\n  });\n}\n\nvar client = urllib.create({\n  agent: httpAgent,\n  httpsAgent: httpsAgent\n});\n\nmodule.exports = client;\nmodule.exports.USER_AGENT = urllib.USER_AGENT;\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/controllers/sync.js":"/**!\n * cnpmjs.org - controllers/sync.js\n *\n * Copyright(c) cnpmjs.org and other contributors.\n * MIT Licensed\n *\n * Authors:\n *  dead_horse <dead_horse@qq.com> (http://deadhorse.me)\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar debug = require('debug')('cnpmjs.org:controllers:sync');\nvar Log = require('../services/module_log');\nvar SyncModuleWorker = require('./sync_module_worker');\nvar config = require('../config');\n\nexports.sync = function* () {\n  var username = this.user.name || 'anonymous';\n  var name = this.params.name || this.params[0];\n  var type = 'package';\n  if (name.indexOf(':') > 0) {\n    // user:fengmk2\n    // package:pedding\n    var splits = name.split(':');\n    type = splits[0];\n    name = splits[1];\n  }\n  var publish = this.query.publish === 'true';\n  var noDep = this.query.nodeps === 'true';\n  debug('sync %s with query: %j', name, this.query);\n  if (type === 'package' && publish && !this.user.isAdmin) {\n    this.status = 403;\n    this.body = {\n      error: 'no_perms',\n      reason: 'Only admin can publish'\n    };\n    return;\n  }\n\n  var options = {\n    type: type,\n    publish: publish,\n    noDep: noDep,\n    syncUpstreamFirst: config.sourceNpmRegistryIsCNpm,\n  };\n\n  var logId = yield* SyncModuleWorker.sync(name, username, options);\n  debug('sync %s got log id %j', name, logId);\n\n  this.status = 201;\n  this.body = {\n    ok: true,\n    logId: logId\n  };\n};\n\nexports.getSyncLog = function* (next) {\n  var logId = Number(this.params.id || this.params[1]);\n  var offset = Number(this.query.offset) || 0;\n\n  if (!logId) { // NaN\n    this.status = 404;\n    return;\n  }\n  var row = yield* Log.get(logId);\n  if (!row) {\n    return yield* next;\n  }\n\n  var log = row.log.trim();\n  if (offset > 0) {\n    log = log.split('\\n').slice(offset).join('\\n');\n  }\n  this.body = {ok: true, log: log};\n};\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/services/module_log.js":"/**!\n * cnpmjs.org - services/module_log.js\n *\n * Copyright(c) fengmk2 and other contributors.\n * MIT Licensed\n *\n * Authors:\n *   fengmk2 <fengmk2@gmail.com> (http://fengmk2.github.com)\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar models = require('../models');\nvar ModuleLog = models.ModuleLog;\n\nexports.create = function* (data) {\n  var row = ModuleLog.build({\n    name: data.name,\n    username: data.username || 'anonymous',\n    log: ''\n  });\n  return yield row.save();\n};\n\nvar ONE_MB = 1024 * 1024;\n\nexports.append = function* (id, log) {\n  if (!log) {\n    return null;\n  }\n\n  var row = yield* exports.get(id);\n  if (!row) {\n    return null;\n  }\n\n  if (row.log) {\n    row.log += '\\n' + log;\n  } else {\n    row.log = log;\n  }\n  if (row.log.length >= ONE_MB) {\n    row.log = '...\\n' + row.log.substring(ONE_MB / 2);\n  }\n  return yield row.save(['log']);\n};\n\nexports.get = function* (id) {\n  return yield ModuleLog.findById(id);\n};\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/controllers/sync_module_worker.js":"'use strict';\n\nvar debug = require('debug')('cnpmjs.org:sync_module_worker');\nvar co = require('co');\nvar gather = require('co-gather');\nvar defer = require('co-defer');\nvar thunkify = require('thunkify-wrap');\nvar EventEmitter = require('events').EventEmitter;\nvar util = require('util');\nvar fs = require('fs');\nvar path = require('path');\nvar crypto = require('crypto');\nvar sleep = require('co-sleep');\nvar utility = require('utility');\nvar urlparse = require('url').parse;\nvar urllib = require('../common/urllib');\nvar config = require('../config');\nvar nfs = require('../common/nfs');\nvar logger = require('../common/logger');\nvar common = require('../lib/common');\nvar npmSerivce = require('../services/npm');\nvar packageService = require('../services/package');\nvar logService = require('../services/module_log');\nvar User = require('../models').User;\nvar os = require('os');\n\nvar USER_AGENT = 'sync.cnpmjs.org/' + config.version +\n  ' hostname/' + os.hostname() +\n  ' syncModel/' + config.syncModel +\n  ' syncInterval/' + config.syncInterval +\n  ' syncConcurrency/' + config.syncConcurrency +\n  ' ' + urllib.USER_AGENT;\n\nfunction SyncModuleWorker(options) {\n  EventEmitter.call(this);\n  this._logId = options.logId;\n  this._log = '';\n  this._loging = false;\n  if (!Array.isArray(options.name)) {\n    options.name = [options.name];\n  }\n\n  this.type = options.type || 'package';\n  this.names = options.name;\n  this.startName = this.names[0];\n\n  this.username = options.username;\n  this.concurrency = options.concurrency || 1;\n  this._publish = options.publish === true; // _publish_on_cnpm\n  this.syncUpstreamFirst = options.syncUpstreamFirst;\n\n  this.syncingNames = {};\n  this.nameMap = {};\n  this.names.forEach(function (name) {\n    this.nameMap[name] = true;\n  }.bind(this));\n  this.noDep = options.noDep === true; // do not sync dependences\n  this.syncDevDependencies = config.syncDevDependencies;\n\n  this.successes = [];\n  this.fails = [];\n  this.updates = [];\n}\n\nutil.inherits(SyncModuleWorker, EventEmitter);\n\nmodule.exports = SyncModuleWorker;\n\nSyncModuleWorker.prototype.finish = function () {\n  debug('syncingNames: %j', this.syncingNames);\n  if (this._finished || Object.keys(this.syncingNames).length > 0) {\n    return;\n  }\n  this._finished = true;\n  this.log('[done] Sync %s %s finished, %d success, %d fail\\nSuccess: [ %s ]\\nFail: [ %s ]',\n    this.startName,\n    this.type,\n    this.successes.length, this.fails.length,\n    this.successes.join(', '), this.fails.join(', '));\n  this.emit('end');\n  // make sure all event listeners release\n  this.removeAllListeners();\n};\n\n// log(format, arg1, arg2, ...)\nSyncModuleWorker.prototype.log = function () {\n  var str = '[' + utility.YYYYMMDDHHmmss() + '] ' + util.format.apply(util, arguments);\n  debug(str);\n  var logId = this._logId;\n  if (logId) {\n    if (this._log) {\n      this._log += '\\n';\n    }\n    this._log += str;\n    this._saveLog();\n  }\n};\n\nSyncModuleWorker.prototype._saveLog = function () {\n  var that = this;\n  if (that._loging) {\n    return;\n  }\n  that._loging = true;\n  var logstr = that._log;\n  that._log = '';\n  co(function* () {\n    yield* logService.append(that._logId, logstr);\n  }).then(function () {\n    that._loging = false;\n    if (that._log) {\n      that._saveLog();\n    }\n  }).catch(function (err) {\n    logger.error(err);\n    that._loging = false;\n    if (that._log) {\n      that._saveLog();\n    }\n  });\n};\n\nSyncModuleWorker.prototype.start = function () {\n  this.log('user: %s, sync %s worker start, %d concurrency, nodeps: %s, publish: %s',\n    this.username, this.names[0], this.concurrency, this.noDep, this._publish);\n  var that = this;\n  co(function* () {\n    // sync upstream\n    if (that.syncUpstreamFirst) {\n      try {\n        yield that.syncUpstream(that.startName);\n      } catch (err) {\n        logger.error(err);\n      }\n    }\n\n    if (that.type === 'user') {\n      yield that.syncUser();\n      return;\n    }\n\n    var arr = [];\n    for (var i = 0; i < that.concurrency; i++) {\n      arr.push(that.next(i));\n    }\n    yield arr;\n  }).catch(function (err) {\n    logger.error(err);\n  });\n};\n\nSyncModuleWorker.prototype.pushSuccess = function (name) {\n  this.successes.push(name);\n  this.emit('success', name);\n};\n\nSyncModuleWorker.prototype.pushFail = function (name) {\n  this.fails.push(name);\n  this.emit('fail', name);\n};\n\nSyncModuleWorker.prototype.add = function (name) {\n  if (this.nameMap[name]) {\n    return;\n  }\n  this.nameMap[name] = true;\n  this.names.push(name);\n  this.emit('add', name);\n  this.log('    add dependencies: %s', name);\n};\n\nSyncModuleWorker.prototype._doneOne = function* (concurrencyId, name, success) {\n  this.log('----------------- Synced %s %s -------------------',\n    name, success ? 'success' : 'fail');\n  if (success) {\n    this.pushSuccess(name);\n  } else {\n    this.pushFail(name);\n  }\n  delete this.syncingNames[name];\n  var that = this;\n  // relase the stack: https://github.com/cnpm/cnpmjs.org/issues/328\n  defer.setImmediate(function* () {\n    yield that.next(concurrencyId);\n  });\n};\n\nSyncModuleWorker.prototype.syncUpstream = function* (name) {\n  if (config.sourceNpmRegistry.indexOf('registry.npmjs.org') >= 0 ||\n      config.sourceNpmRegistry.indexOf('registry.npmjs.com') >= 0 ||\n      config.sourceNpmRegistry.indexOf('replicate.npmjs.com') >= 0) {\n    this.log('----------------- upstream is npm registry: %s, ignore it -------------------',\n      config.sourceNpmRegistry);\n    return;\n  }\n  var syncname = name;\n  if (this.type === 'user') {\n    syncname = this.type + ':' + syncname;\n  }\n  var url = config.sourceNpmRegistry + '/' + syncname + '/sync';\n  if (this.noDep) {\n    url += '?nodeps=true';\n  }\n  var r = yield urllib.request(url, {\n    method: 'put',\n    timeout: 20000,\n    headers: {\n      'content-length': 0\n    },\n    dataType: 'json',\n    gzip: true,\n  });\n\n  if (r.status !== 201 || !r.data.ok) {\n    return this.log('sync upstream %s error, status: %s, response: %j',\n      url, r.status, r.data);\n  }\n\n  var logURL = config.sourceNpmRegistry + '/' + name + '/sync/log/' + r.data.logId;\n  var offset = 0;\n  this.log('----------------- Syncing upstream %s -------------------', logURL);\n\n  var count = 0;\n  while (true) {\n    count++;\n    var synclogURL = logURL + '?offset=' + offset;\n    var rs = yield urllib.request(synclogURL, {\n      timeout: 20000,\n      dataType: 'json',\n      gzip: true,\n    });\n\n    if (rs.status !== 200 || !rs.data.ok) {\n      this.log('sync upstream %s error, status: %s, response: %j',\n        synclogURL, rs.status, rs.data);\n      break;\n    }\n\n    var data = rs.data;\n    var syncDone = false;\n    if (data.log && data.log.indexOf('[done] Sync') >= 0) {\n      syncDone = true;\n      data.log = data.log.replace('[done] Sync', '[Upstream done] Sync');\n    }\n\n    if (data.log) {\n      this.log(data.log);\n    }\n\n    if (syncDone) {\n      break;\n    }\n\n    if (count >= 30) {\n      this.log('sync upstream %s fail, give up', logURL);\n      break;\n    }\n\n    if (data.log) {\n      offset += data.log.split('\\n').length;\n    }\n\n    yield sleep(2000);\n  }\n  this.log('----------------- Synced upstream %s -------------------', logURL);\n};\n\nSyncModuleWorker.prototype.syncUser = function* () {\n  for (var i = 0; i < this.names.length; i++) {\n    var username = this.names[i];\n    try {\n      var user = yield _saveNpmUser(username);\n      this.pushSuccess(username);\n      this.log('[c#%s] [%s] sync success: %j', 0, username, user);\n    } catch (err) {\n      this.pushFail(username);\n      this.log('[c#%s] [error] [%s] sync error: %s', 0, username, err.stack);\n    }\n  }\n  this.finish();\n};\n\nSyncModuleWorker.prototype.next = function* (concurrencyId) {\n  if (config.syncModel === 'none') {\n    this.log('[c#%d] [%s] syncModel is none, ignore',\n      concurrencyId, name);\n    return this.finish();\n  }\n\n  var name = this.names.shift();\n  if (!name) {\n    return setImmediate(this.finish.bind(this));\n  }\n\n  // try to sync from official replicate when source npm registry is not cnpmjs.org\n  const registry = config.sourceNpmRegistryIsCNpm ? config.sourceNpmRegistry : config.officialNpmReplicate;\n\n  const versions = yield this.syncByName(concurrencyId, name, registry);\n  if (versions && versions.length === 0 && registry === config.officialNpmReplicate) {\n    // need to sync sourceNpmRegistry also\n    // make sure package data be update event replicate down.\n    // https://github.com/npm/registry/issues/129\n    yield this.syncByName(concurrencyId, name, config.officialNpmRegistry);\n  }\n};\n\nSyncModuleWorker.prototype.syncByName = function* (concurrencyId, name, registry) {\n  var that = this;\n  that.syncingNames[name] = true;\n  var pkg = null;\n  var status = 0;\n\n  this.log('----------------- Syncing %s -------------------', name);\n\n  // ignore private scoped package\n  if (common.isPrivateScopedPackage(name)) {\n    this.log('[c#%d] [%s] ignore sync private scoped %j package',\n      concurrencyId, name, config.scopes);\n    yield this._doneOne(concurrencyId, name, true);\n    return;\n  }\n\n  // get from npm\n  const packageUrl = '/' + name.replace('/', '%2f');\n  try {\n    var result = yield npmSerivce.request(packageUrl, { registry: registry });\n    pkg = result.data;\n    status = result.status;\n  } catch (err) {\n    // if 404\n    if (!err.res || err.res.statusCode !== 404) {\n      var errMessage = err.name + ': ' + err.message;\n      that.log('[c#%s] [error] [%s] get package(%s%s) error: %s, status: %s',\n        concurrencyId, name, registry, packageUrl, errMessage, status);\n      yield that._doneOne(concurrencyId, name, false);\n      return;\n    }\n  }\n\n  if (status === 404 && pkg && pkg.reason === 'deleted' && registry === config.officialNpmReplicate) {\n    // unpublished package on replicate.npmjs.com\n    // 404 { error: 'not_found', reason: 'deleted' }\n    // try to read from registry.npmjs.com and get the whole unpublished info\n    try {\n      var result = yield npmSerivce.request(packageUrl, { registry: config.sourceNpmRegistry });\n      pkg = result.data;\n      status = result.status;\n    } catch (err) {\n      // if 404\n      if (!err.res || err.res.statusCode !== 404) {\n        var errMessage = err.name + ': ' + err.message;\n        that.log('[c#%s] [error] [%s] get package(%s%s) error: %s, status: %s',\n          concurrencyId, name, config.sourceNpmRegistry, packageUrl, errMessage, status);\n        yield that._doneOne(concurrencyId, name, false);\n        return;\n      }\n    }\n  }\n\n  var unpublishedInfo = null;\n  if (status === 404) {\n    // check if it's unpublished\n    // ignore too long package name, see https://github.com/cnpm/cnpmjs.org/issues/1066\n    if (name.length < 80 && pkg && pkg.time && pkg.time.unpublished && pkg.time.unpublished.time) {\n      unpublishedInfo = pkg.time.unpublished;\n    } else {\n      pkg = null;\n    }\n  } else {\n    // unpublished package status become to 200\n    if (name.length < 80 && pkg && pkg.time && pkg.time.unpublished && pkg.time.unpublished.time) {\n      unpublishedInfo = pkg.time.unpublished;\n    }\n  }\n\n  if (!pkg) {\n    that.log('[c#%s] [error] [%s] get package(%s%s) error: package not exists, status: %s',\n      concurrencyId, name, registry, packageUrl, status);\n    yield that._doneOne(concurrencyId, name, true);\n    return;\n  }\n\n  that.log('[c#%d] [%s] package(%s%s) status: %s, dist-tags: %j, time.modified: %s, unpublished: %j, start...',\n    concurrencyId, name, registry, packageUrl, status,\n    pkg['dist-tags'], pkg.time && pkg.time.modified,\n    unpublishedInfo);\n\n  if (unpublishedInfo) {\n    try {\n      yield that._unpublished(name, unpublishedInfo);\n    } catch (err) {\n      that.log('[c#%s] [error] [%s] sync error: %s', concurrencyId, name, err.stack);\n      yield that._doneOne(concurrencyId, name, false);\n      return;\n    }\n    return yield that._doneOne(concurrencyId, name, true);\n  }\n\n  var versions;\n  try {\n    versions = yield that._sync(name, pkg);\n  } catch (err) {\n    that.log('[c#%s] [error] [%s] sync error: %s', concurrencyId, name, err.stack);\n    yield that._doneOne(concurrencyId, name, false);\n    return;\n  }\n\n  // has new version\n  if (versions.length > 0) {\n    that.updates.push(name);\n  }\n\n  this.log('[c#%d] [%s] synced success, %d versions: %s',\n    concurrencyId, name, versions.length, versions.join(', '));\n  yield this._doneOne(concurrencyId, name, true);\n\n  return versions;\n};\n\nfunction* _listStarUsers(modName) {\n  var users = yield packageService.listStarUserNames(modName);\n  var userMap = {};\n  users.forEach(function (user) {\n    userMap[user] = true;\n  });\n  return userMap;\n}\n\nfunction* _saveNpmUser(username) {\n  var user = yield npmSerivce.getUser(username);\n  if (!user) {\n    var existsUser = yield User.findByName(username);\n    if (existsUser && existsUser.isNpmUser) {\n      // delete it\n      yield User.destroy({\n        where: {\n          name: username,\n        }\n      });\n      return { exists: true, deleted: true, isNpmUser: true };\n    }\n    return { exists: false };\n  }\n  yield User.saveNpmUser(user);\n  return user;\n}\n\nfunction* _saveMaintainer(modName, username, action) {\n  if (action === 'add') {\n    yield* packageService.addPublicModuleMaintainer(modName, username);\n  } else if (action === 'remove') {\n    yield* packageService.removePublicModuleMaintainer(modName, username);\n  }\n}\n\nSyncModuleWorker.prototype._unpublished = function* (name, unpublishedInfo) {\n  var mods = yield* packageService.listModulesByName(name);\n  this.log('  [%s] start unpublished %d versions from local cnpm registry',\n    name, mods.length);\n  if (common.isLocalModule(mods)) {\n    // publish on cnpm, dont sync this version package\n    this.log('  [%s] publish on local cnpm registry, don\\'t sync', name);\n    return [];\n  }\n\n  var r = yield* packageService.saveUnpublishedModule(name, unpublishedInfo);\n  this.log('    [%s] save unpublished info: %j to row#%s',\n    name, unpublishedInfo, r.id);\n  if (mods.length === 0) {\n    return;\n  }\n  yield [packageService.removeModulesByName(name), packageService.removeModuleTags(name)];\n  var keys = [];\n  for (var i = 0; i < mods.length; i++) {\n    var row = mods[i];\n    var dist = row.package.dist;\n    var key = dist.key;\n    if (!key) {\n      key = urlparse(dist.tarball).pathname;\n    }\n    key && keys.push(key);\n  }\n\n  if (keys.length > 0) {\n    try {\n      yield keys.map(function (key) {\n        return nfs.remove(key);\n      });\n    } catch (err) {\n      // ignore error here\n      this.log('    [%s] delete nfs files: %j error: %s: %s',\n        name, keys, err.name, err.message);\n    }\n  }\n  this.log('    [%s] delete nfs files: %j success', name, keys);\n};\n\nSyncModuleWorker.prototype._sync = function* (name, pkg) {\n  var that = this;\n  var hasModules = false;\n  var result = yield [\n    packageService.listModulesByName(name),\n    packageService.listModuleTags(name),\n    _listStarUsers(name),\n    packageService.listPublicModuleMaintainers(name),\n  ];\n  var moduleRows = result[0];\n  var tagRows = result[1];\n  var existsStarUsers = result[2];\n  var existsNpmMaintainers = result[3];\n\n  if (common.isLocalModule(moduleRows)) {\n    // publish on cnpm, dont sync this version package\n    that.log('  [%s] publish on local cnpm registry, don\\'t sync', name);\n    return [];\n  }\n\n  hasModules = moduleRows.length > 0;\n  var map = {};\n  var localVersionNames = [];\n  for (var i = 0; i < moduleRows.length; i++) {\n    var r = moduleRows[i];\n    if (!r.package || !r.package.dist) {\n      // package json parse error\n      continue;\n    }\n    if (!map.latest) {\n      map.latest = r;\n    }\n    map[r.version] = r;\n    localVersionNames.push(r.version);\n  }\n\n  var tags = {};\n  for (var i = 0; i < tagRows.length; i++) {\n    var r = tagRows[i];\n    if (!r.module_id) {\n      // no module_id, need to sync tags\n      continue;\n    }\n    tags[r.tag] = r.version;\n  }\n\n  var missingVersions = [];\n  var missingTags = [];\n  var missingDescriptions = [];\n  var missingReadmes = [];\n  var missingStarUsers = [];\n  var npmUsernames = {};\n  var missingDeprecateds = [];\n  // [[user, 'add or remove'], ...]\n  var diffNpmMaintainers = [];\n\n  // find out new maintainers\n  var pkgMaintainers = pkg.maintainers || [];\n  if (Array.isArray(pkgMaintainers)) {\n    var existsMap = {};\n    var originalMap = {};\n    for (var i = 0; i < existsNpmMaintainers.length; i++) {\n      var user = existsNpmMaintainers[i];\n      existsMap[user] = true;\n    }\n    for (var i = 0; i < pkgMaintainers.length; i++) {\n      var item = pkgMaintainers[i];\n      originalMap[item.name] = item;\n      npmUsernames[item.name.toLowerCase()] = 1;\n    }\n\n    // find add users\n    for (var i = 0; i < pkgMaintainers.length; i++) {\n      var item = pkgMaintainers[i];\n      if (!existsMap[item.name]) {\n        diffNpmMaintainers.push([item.name, 'add']);\n      }\n    }\n\n    // find remove users\n    for (var i = 0; i < existsNpmMaintainers.length; i++) {\n      var user = existsNpmMaintainers[i];\n      if (!originalMap[user]) {\n        diffNpmMaintainers.push([user, 'remove']);\n      }\n    }\n  }\n\n  // find out all user names\n  for (var v in pkg.versions) {\n    var p = pkg.versions[v];\n    var maintainers = p.maintainers || [];\n    if (!Array.isArray(maintainers)) {\n      // http://r.cnpmjs.org/jasmine-node\n      // TODO: \"maintainers\": \"Martin H膫陇ger <martin.haeger@gmail.com>\",\n      maintainers = [maintainers];\n    }\n    for (var i = 0; i < maintainers.length; i++) {\n      var m = maintainers[i];\n      if (m.name) {\n        npmUsernames[m.name.toLowerCase()] = 1;\n      }\n    }\n  }\n\n  // get the missing star users\n  var starUsers = pkg.users || {};\n  for (var k in starUsers) {\n    if (!existsStarUsers[k]) {\n      missingStarUsers.push(k);\n    }\n    npmUsernames[k.toLowerCase()] = 1;\n  }\n  that.log('  [%s] found %d missing star users', name, missingStarUsers.length);\n\n  var times = pkg.time || {};\n  pkg.versions = pkg.versions || {};\n  var remoteVersionNames = Object.keys(pkg.versions);\n  var remoteVersionNameMap = {};\n\n  // find out missing versions\n  for (var i = 0; i < remoteVersionNames.length; i++) {\n    var v = remoteVersionNames[i];\n    remoteVersionNameMap[v] = v;\n    var exists = map[v] || {};\n    var version = pkg.versions[v];\n    if (!version || !version.dist || !version.dist.tarball) {\n      continue;\n    }\n    //patch for readme\n    if (!version.readme) {\n      version.readme = pkg.readme;\n    }\n    var publish_time = times[v];\n    version.publish_time = publish_time ? Date.parse(publish_time) : null;\n    if (!version.maintainers || !version.maintainers[0]) {\n      version.maintainers = pkg.maintainers;\n    }\n    if (exists.package &&\n        exists.package.dist.shasum === version.dist.shasum) {\n      // * shasum make sure equal\n      if ((version.publish_time === exists.publish_time) ||\n          (!version.publish_time && exists.publish_time)) {\n        // debug('  [%s] %s publish_time equal: %s, %s',\n        //   name, version.version, version.publish_time, exists.publish_time);\n        // * publish_time make sure equal\n        if (exists.description === null && version.description) {\n          // * make sure description exists\n          missingDescriptions.push({\n            id: exists.id,\n            description: version.description\n          });\n        }\n\n        if (!exists.package.readme && version.readme) {\n          // * make sure readme exists\n          missingReadmes.push({\n            id: exists.id,\n            readme: version.readme\n          });\n        }\n\n        if (version.deprecated && version.deprecated !== exists.package.deprecated) {\n          // need to sync deprecated field\n          missingDeprecateds.push({\n            id: exists.id,\n            deprecated: version.deprecated\n          });\n        }\n        if (exists.package.deprecated && !version.deprecated) {\n          // remove deprecated info\n          missingDeprecateds.push({\n            id: exists.id,\n            deprecated: undefined,\n          });\n        }\n        continue;\n      }\n    }\n    missingVersions.push(version);\n  }\n\n  // find out deleted versions\n  var deletedVersionNames = [];\n  for (var i = 0; i < localVersionNames.length; i++) {\n    var v = localVersionNames[i];\n    if (!remoteVersionNameMap[v]) {\n      deletedVersionNames.push(v);\n    }\n  }\n\n  // find out missing tags\n  var sourceTags = pkg['dist-tags'] || {};\n  for (var t in sourceTags) {\n    var sourceTagVersion = sourceTags[t];\n    if (sourceTagVersion && tags[t] !== sourceTagVersion) {\n      missingTags.push([t, sourceTagVersion]);\n    }\n  }\n  // find out deleted tags\n  var deletedTags = [];\n  for (var t in tags) {\n    if (!sourceTags[t]) {\n      // not in remote tags, delete it from local registry\n      deletedTags.push(t);\n    }\n  }\n\n  if (missingVersions.length === 0) {\n    that.log('  [%s] all versions are exists', name);\n  } else {\n    missingVersions.sort(function (a, b) {\n      return a.publish_time - b.publish_time;\n    });\n    that.log('  [%s] %d versions need to sync', name, missingVersions.length);\n  }\n\n  var syncedVersionNames = [];\n  var syncIndex = 0;\n\n  // sync missing versions\n  while (missingVersions.length) {\n    var index = syncIndex++;\n    var syncModule = missingVersions.shift();\n    if (!syncModule.dist.tarball) {\n      continue;\n    }\n    try {\n      yield that._syncOneVersion(index, syncModule);\n      syncedVersionNames.push(syncModule.version);\n    } catch (err) {\n      that.log('    [%s:%d] sync error, version: %s, %s: %s',\n        syncModule.name, index, syncModule.version, err.name, err.stack);\n    }\n  }\n\n  if (deletedVersionNames.length === 0) {\n    that.log('  [%s] no versions need to deleted', name);\n  } else {\n    that.log('  [%s] %d versions: %j need to deleted',\n      name, deletedVersionNames.length, deletedVersionNames);\n    try {\n      yield packageService.removeModulesByNameAndVersions(name, deletedVersionNames);\n    } catch (err) {\n      that.log('    [%s] delete error, %s: %s', name, err.name, err.message);\n    }\n  }\n\n  // sync missing descriptions\n  function* syncDes() {\n    if (missingDescriptions.length === 0) {\n      return;\n    }\n    that.log('  [%s] saving %d descriptions', name, missingDescriptions.length);\n    var res = yield gather(missingDescriptions.map(function (item) {\n      return packageService.updateModuleDescription(item.id, item.description);\n    }));\n\n    for (var i = 0; i < res.length; i++) {\n      var item = missingDescriptions[i];\n      var r = res[i];\n      if (r.error) {\n        that.log('    save error, id: %s, description: %s, error: %s',\n          item.id, item.description, r.error.message);\n      } else {\n        that.log('    saved, id: %s, description length: %d',\n          item.id, item.description.length);\n      }\n    }\n  }\n\n  // sync missing tags\n  function* syncTag() {\n    if (deletedTags.length > 0) {\n      yield* packageService.removeModuleTagsByNames(name, deletedTags);\n      that.log('  [%s] deleted %d tags: %j',\n        name, deletedTags.length, deletedTags);\n    }\n\n    if (missingTags.length === 0) {\n      return;\n    }\n    that.log('  [%s] adding %d tags', name, missingTags.length);\n    // sync tags\n    var res = yield gather(missingTags.map(function (item) {\n      return packageService.addModuleTag(name, item[0], item[1]);\n    }));\n\n    for (var i = 0; i < res.length; i++) {\n      var item = missingTags[i];\n      var r = res[i];\n      if (r.error) {\n        that.log('    add tag %s:%s error, error: %s',\n          item.id, item.description, r.error.message);\n      } else {\n        that.log('    added tag %s:%s, module_id: %s',\n          item[0], item[1], r.value && r.value.module_id);\n      }\n    }\n  }\n\n  // sycn missing readme\n  function* syncReadme() {\n    if (missingReadmes.length === 0) {\n      return;\n    }\n    that.log('  [%s] saving %d readmes', name, missingReadmes.length);\n\n    var res = yield gather(missingReadmes.map(function (item) {\n      return packageService.updateModuleReadme(item.id, item.readme);\n    }));\n\n    for (var i = 0; i < res.length; i++) {\n      var item = missingReadmes[i];\n      var r = res[i];\n      if (r.error) {\n        that.log('    save error, id: %s, error: %s', item.id, r.error.message);\n      } else {\n        that.log('    saved, id: %s', item.id);\n      }\n    }\n  }\n\n  function *syncDeprecateds() {\n    if (missingDeprecateds.length === 0) {\n      return;\n    }\n    that.log('  [%s] saving %d Deprecated fields', name, missingDeprecateds.length);\n\n    var res = yield gather(missingDeprecateds.map(function (item) {\n      return packageService.updateModulePackageFields(item.id, {\n        deprecated: item.deprecated\n      });\n    }));\n\n    for (var i = 0; i < res.length; i++) {\n      var item = missingDeprecateds[i];\n      var r = res[i];\n      if (r.error) {\n        that.log('    save error, id: %s, error: %s', item.id, r.error.message);\n      } else {\n        that.log('    saved, id: %s, deprecated: %j', item.id, item.deprecated);\n      }\n    }\n  }\n\n  function* syncMissingUsers() {\n    var missingUsers = [];\n    var names = Object.keys(npmUsernames);\n    if (names.length === 0) {\n      return;\n    }\n    var rows = yield* User.listByNames(names);\n    var map = {};\n    rows.forEach(function (r) {\n      map[r.name] = r;\n    });\n    names.forEach(function (username) {\n      var r = map[username];\n      if (!r || !r.json) {\n        if (username[0] !== '\"' && username[0] !== \"'\") {\n          missingUsers.push(username);\n        }\n      }\n    });\n\n    if (missingUsers.length === 0) {\n      that.log('  [%s] all %d npm users exists', name, names.length);\n      return;\n    }\n\n    that.log('  [%s] saving %d/%d missing npm users: %j',\n      name, missingUsers.length, names.length, missingUsers);\n    var res = yield gather(missingUsers.map(function (username) {\n      return _saveNpmUser(username);\n    }));\n\n    for (var i = 0; i < res.length; i++) {\n      var r = res[i];\n      if (r.error) {\n        that.log('    save npm user error, %s', r.error.message);\n      }\n    }\n  }\n\n  // sync missing star users\n  function* syncMissingStarUsers() {\n    if (missingStarUsers.length === 0) {\n      return;\n    }\n\n    that.log('  [%s] saving %d star users', name, missingStarUsers.length);\n    var res = yield gather(missingStarUsers.map(function (username) {\n      return packageService.addStar(name, username);\n    }));\n\n    for (var i = 0; i < res.length; i++) {\n      var r = res[i];\n      if (r.error) {\n        that.log('    add star user error, %s', r.error.stack);\n      }\n    }\n  }\n\n  // sync diff npm package maintainers\n  function* syncNpmPackageMaintainers() {\n    if (diffNpmMaintainers.length === 0) {\n      return;\n    }\n\n    that.log('  [%s] syncing %d diff package maintainers: %j',\n      name, diffNpmMaintainers.length, diffNpmMaintainers);\n    var res = yield gather(diffNpmMaintainers.map(function (item) {\n      return _saveMaintainer(name, item[0], item[1]);\n    }));\n\n    for (var i = 0; i < res.length; i++) {\n      var r = res[i];\n      if (r.error) {\n        that.log('    save package maintainer error, %s', r.error.stack);\n      }\n    }\n  }\n\n  yield [\n    syncDes(),\n    syncTag(),\n    syncReadme(),\n    syncDeprecateds(),\n    syncMissingStarUsers(),\n    syncMissingUsers(),\n    syncNpmPackageMaintainers(),\n  ];\n  return syncedVersionNames;\n};\n\nSyncModuleWorker.prototype._syncOneVersion = function *(versionIndex, sourcePackage) {\n  var delay = Date.now() - sourcePackage.publish_time;\n  logger.syncInfo('[sync_module_worker] delay: %s ms, publish_time: %s, start sync %s@%s',\n    delay, utility.logDate(new Date(sourcePackage.publish_time)),\n    sourcePackage.name, sourcePackage.version);\n  var that = this;\n  var username = this.username;\n  var downurl = sourcePackage.dist.tarball;\n  var filename = path.basename(downurl);\n  var filepath = common.getTarballFilepath(filename);\n  var ws = fs.createWriteStream(filepath);\n\n  var options = {\n    writeStream: ws,\n    followRedirect: true,\n    timeout: 600000, // 10 minutes download\n    headers: {\n      'user-agent': USER_AGENT\n    },\n    gzip: true,\n  };\n\n  var dependencies = Object.keys(sourcePackage.dependencies || {});\n  var devDependencies = [];\n  if (this.syncDevDependencies) {\n    devDependencies = Object.keys(sourcePackage.devDependencies || {});\n  }\n\n  that.log('    [%s:%d] syncing, delay: %s ms, version: %s, dist: %j, no deps: %s, ' +\n   'publish on cnpm: %s, dependencies: %d, devDependencies: %d, syncDevDependencies: %s',\n    sourcePackage.name, versionIndex,\n    delay,\n    sourcePackage.version,\n    sourcePackage.dist, that.noDep, that._publish,\n    dependencies.length,\n    devDependencies.length, this.syncDevDependencies);\n\n  if (dependencies.length > config.maxDependencies) {\n    dependencies = dependencies.slice(0, config.maxDependencies);\n  }\n\n  if (devDependencies.length > config.maxDependencies) {\n    devDependencies = devDependencies.slice(0, config.maxDependencies);\n  }\n\n  if (!that.noDep) {\n    for (var i = 0; i < dependencies.length; i++) {\n      that.add(dependencies[i]);\n    }\n\n    for (var i = 0; i < devDependencies.length; i++) {\n      that.add(devDependencies[i]);\n    }\n  }\n\n  // add module dependence\n  yield packageService.addDependencies(sourcePackage.name, dependencies);\n\n  var shasum = crypto.createHash('sha1');\n  var dataSize = 0;\n\n  try {\n    // get tarball\n    logger.syncInfo('[sync_module_worker] downloading %j to %j', downurl, filepath);\n    var r;\n    try {\n      r = yield urllib.request(downurl, options);\n    } catch (err) {\n      logger.syncInfo('[sync_module_worker] download %j to %j error: %s', downurl, filepath, err);\n      throw err;\n    }\n\n    var statusCode = r.status || -1;\n    // https://github.com/cnpm/cnpmjs.org/issues/325\n    // if (statusCode === 404) {\n    //   shasum = sourcePackage.dist.shasum;\n    //   return yield *afterUpload({\n    //     url: downurl\n    //   });\n    // }\n\n    if (statusCode !== 200) {\n      var err = new Error('Download ' + downurl + ' fail, status: ' + statusCode);\n      err.name = 'DownloadTarballError';\n      err.data = sourcePackage;\n      logger.syncInfo('[sync_module_worker] %s', err.message);\n      throw err;\n    }\n\n    // read and check\n    var rs = fs.createReadStream(filepath);\n    rs.on('data', function (data) {\n      shasum.update(data);\n      dataSize += data.length;\n    });\n    var end = thunkify.event(rs);\n    yield end(); // after end event emit\n\n    if (dataSize === 0) {\n      var err = new Error('Download ' + downurl + ' file size is zero');\n      err.name = 'DownloadTarballSizeZeroError';\n      err.data = sourcePackage;\n      logger.syncInfo('[sync_module_worker] %s', err.message);\n      throw err;\n    }\n\n    // check shasum\n    shasum = shasum.digest('hex');\n    if (shasum !== sourcePackage.dist.shasum) {\n      var err = new Error('Download ' + downurl + ' shasum:' + shasum +\n        ' not match ' + sourcePackage.dist.shasum);\n      err.name = 'DownloadTarballShasumError';\n      err.data = sourcePackage;\n      logger.syncInfo('[sync_module_worker] %s', err.message);\n      throw err;\n    }\n\n    options = {\n      key: common.getCDNKey(sourcePackage.name, filename),\n      size: dataSize,\n      shasum: shasum\n    };\n    // upload to NFS\n    logger.syncInfo('[sync_module_worker] uploading %j to nfs', options);\n    var result;\n    try {\n      result = yield nfs.upload(filepath, options);\n    } catch (err) {\n      logger.syncInfo('[sync_module_worker] upload %j to nfs error: %s', err);\n      throw err;\n    }\n    logger.syncInfo('[sync_module_worker] uploaded, saving %j to database', result);\n    var r = yield afterUpload(result);\n    logger.syncInfo('[sync_module_worker] sync %s@%s done!',\n      sourcePackage.name, sourcePackage.version);\n    return r;\n  } finally {\n    // remove tmp file whatever\n    fs.unlink(filepath, utility.noop);\n  }\n\n  function *afterUpload(result) {\n    //make sure sync module have the correct author info\n    //only if can not get maintainers, use the username\n    var author = username;\n    if (Array.isArray(sourcePackage.maintainers)) {\n      author = sourcePackage.maintainers[0].name || username;\n    }\n\n    var mod = {\n      version: sourcePackage.version,\n      name: sourcePackage.name,\n      package: sourcePackage,\n      author: author,\n      publish_time: sourcePackage.publish_time,\n    };\n\n    // delete _publish_on_cnpm, because other cnpm maybe sync from current cnpm\n    delete mod.package._publish_on_cnpm;\n    if (that._publish) {\n      // sync as publish\n      mod.package._publish_on_cnpm = true;\n    }\n\n    var dist = {\n      shasum: shasum,\n      size: dataSize,\n      noattachment: dataSize === 0,\n    };\n\n    if (result.url) {\n      dist.tarball = result.url;\n    } else if (result.key) {\n      dist.key = result.key;\n      dist.tarball = result.key;\n    }\n\n    mod.package.dist = dist;\n    var r = yield packageService.saveModule(mod);\n\n    that.log('    [%s:%s] done, insertId: %s, author: %s, version: %s, '\n      + 'size: %d, publish_time: %j, publish on cnpm: %s',\n      sourcePackage.name, versionIndex,\n      r.id,\n      author, mod.version, dataSize,\n      new Date(mod.publish_time),\n      that._publish);\n\n    return r;\n  }\n};\n\nSyncModuleWorker.sync = function* (name, username, options) {\n  options = options || {};\n  var result = yield logService.create({name: name, username: username});\n  var worker = new SyncModuleWorker({\n    logId: result.id,\n    type: options.type,\n    name: name,\n    username: username,\n    noDep: options.noDep,\n    publish: options.publish,\n    syncUpstreamFirst: options.syncUpstreamFirst,\n  });\n  worker.start();\n  return result.id;\n};\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/lib/common.js":"/**!\n * cnpmjs.org - lib/common.js\n *\n * Copyright(c) cnpmjs.org and other contributors.\n * MIT Licensed\n *\n * Authors:\n *  fengmk2 <fengmk2@gmail.com> (http://fengmk2.github.com)\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar crypto = require('crypto');\nvar path = require('path');\nvar config = require('../config');\nvar util = require('util');\n\nexports.getTarballFilepath = function (filename) {\n  // ensure download file path unique\n  // TODO: not only .tgz, and also other extname\n  var name = filename.replace(/\\.tgz$/, '.' + crypto.randomBytes(16).toString('hex') + '.tgz');\n  return path.join(config.uploadDir, name);\n};\n\nexports.getCDNKey = function (name, filename) {\n  // if name is scope package name, need to auto fix filename as a scope package file name\n  // e.g.: @scope/foo, filename: foo-1.0.0.tgz => filename: @scope/foo-1.0.0.tgz\n  if (name[0] === '@' && filename[0] !== '@') {\n    filename = name.split('/')[0] + '/' + filename;\n  }\n  return '/' + name + '/-/' + filename;\n};\n\nexports.setDownloadURL = function (pkg, ctx, host) {\n  if (pkg.dist) {\n    host = host || config.registryHost || ctx.host;\n    pkg.dist.tarball = util.format('%s://%s/%s/download/%s-%s.tgz',\n      ctx.protocol,\n      host, pkg.name, pkg.name, pkg.version);\n  }\n};\n\nexports.isAdmin = function (username) {\n  return typeof config.admins[username] === 'string';\n};\n\nexports.isMaintainer = function (user, maintainers) {\n  if (user.isAdmin) {\n    return true;\n  }\n\n  var username = user.name;\n  maintainers = maintainers || [];\n  var match = maintainers.filter(function (item) {\n    return item.name === username;\n  });\n\n  return match.length > 0;\n};\n\nexports.isLocalModule = function (mods) {\n  for (var i = 0; i < mods.length; i++) {\n    var r = mods[i];\n    if (r.package && r.package._publish_on_cnpm) {\n      return true;\n    }\n  }\n  return false;\n};\n\nexports.isPrivateScopedPackage = function (name) {\n  if (name[0] !== '@') {\n    return false;\n  }\n  return config.scopes.indexOf(name.split('/')[0]) >= 0;\n};\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/services/npm.js":"'use strict';\n\nvar ms = require('humanize-ms');\nvar cleanNpmMetadata = require('normalize-registry-metadata');\nvar urllib = require('../common/urllib');\nvar config = require('../config');\n\nvar USER_AGENT = 'npm_service.cnpmjs.org/' + config.version + ' ' + urllib.USER_AGENT;\n\nfunction* request(url, options) {\n  options = options || {};\n  options.dataType = options.dataType || 'json';\n  options.timeout = options.timeout || 120000;\n  options.headers = {\n    'user-agent': USER_AGENT\n  };\n  options.gzip = true;\n  options.followRedirect = true;\n  var registry = options.registry || config.sourceNpmRegistry;\n  url = registry + url;\n  var r;\n  try {\n    r = yield urllib.request(url, options);\n    // https://github.com/npm/registry/issues/87#issuecomment-261450090\n    if (options.dataType === 'json' && r.data && config.officialNpmReplicate === registry) {\n      cleanNpmMetadata(r.data);\n    }\n  } catch (err) {\n    var statusCode = err.status || -1;\n    var data = err.data || '[empty]';\n    if (err.name === 'JSONResponseFormatError' && statusCode >= 500) {\n      err.name = 'NPMServerError';\n      err.status = statusCode;\n      err.message = 'Url: ' + url + ', Status ' + statusCode + ', ' + data.toString();\n    }\n    throw err;\n  }\n  return r;\n}\n\nexports.request = request;\n\nexports.getUser = function* (name) {\n  var url = '/-/user/org.couchdb.user:' + name;\n  var r = yield* request(url);\n  var data = r.data;\n  if (data && !data.name) {\n    // 404\n    data = null;\n  }\n  return data;\n};\n\nexports.get = function* (name) {\n  var r = yield* request('/' + name);\n  var data = r.data;\n  if (r.status === 404) {\n    data = null;\n  }\n  return data;\n};\n\nexports.fetchUpdatesSince = function* (lastSyncTime, timeout) {\n  var lastModified = lastSyncTime - ms('10m');\n  var data = yield exports.getAllSince(lastModified, timeout);\n  var result = {\n    lastModified: lastSyncTime,\n    names: [],\n  };\n  if (!data) {\n    return result;\n  }\n  if (Array.isArray(data)) {\n    // support https://registry.npmjs.org/-/all/static/today.json\n    var maxModified;\n    data.forEach(function (pkg) {\n      if (pkg.time && pkg.time.modified) {\n        var modified = Date.parse(pkg.time.modified);\n        if (modified >= lastModified) {\n          result.names.push(pkg.name);\n        }\n        if (!maxModified || modified > maxModified) {\n          maxModified = modified;\n        }\n      } else {\n        result.names.push(pkg.name);\n      }\n    });\n    if (maxModified) {\n      result.lastModified = maxModified;\n    }\n  } else {\n    // /-/all/since\n    if (data._updated) {\n      result.lastModified = data._updated;\n      delete data._updated;\n    }\n    result.names = Object.keys(data);\n  }\n  return result;\n};\n\nexports.fetchAllPackagesSince = function* (timestamp) {\n  var r = yield request('/-/all/static/all.json', {\n    registry: 'http://registry.npmjs.org',\n    timeout: 600000\n  });\n  // {\"_updated\":1441520402174,\"0\":{\"name\":\"0\",\"dist-tags\n  // \"time\":{\"modified\":\"2014-06-17T06:38:43.495Z\"}\n  var data = r.data;\n  var result = {\n    lastModified: timestamp,\n    lastModifiedName: null,\n    names: [],\n  };\n  var maxModified;\n  for (var key in data) {\n    if (key === '_updated') {\n      continue;\n    }\n    var pkg = data[key];\n    if (!pkg.time || !pkg.time.modified) {\n      continue;\n    }\n    var modified = Date.parse(pkg.time.modified);\n    if (modified >= timestamp) {\n      result.names.push(pkg.name);\n    }\n    if (!maxModified || modified > maxModified) {\n      maxModified = modified;\n      result.lastModifiedName = pkg.name;\n    }\n  }\n  if (maxModified) {\n    result.lastModified = maxModified;\n  }\n  return result;\n};\n\nexports.getAllSince = function* (startkey, timeout) {\n  var r = yield* request('/-/all/since?stale=update_after&startkey=' + startkey, {\n    timeout: timeout || 300000\n  });\n  return r.data;\n};\n\nexports.getAllToday = function* (timeout) {\n  var r = yield* request('/-/all/static/today.json', {\n    timeout: timeout || 300000\n  });\n  // data is array: see https://registry.npmjs.org/-/all/static/today.json\n  return r.data;\n};\n\nexports.getShort = function* (timeout) {\n  var r = yield* request('/-/short', {\n    timeout: timeout || 300000,\n    // registry.npmjs.org/-/short is 404 now therefore have a fallback\n    registry: config.sourceNpmRegistryIsCNpm ? config.sourceNpmRegistry : 'http://r.cnpmjs.org',\n  });\n  return r.data;\n};\n\nexports.getPopular = function* (top, timeout) {\n  var r = yield* request('/-/_view/dependedUpon?group_level=1', {\n    registry: config.officialNpmRegistry,\n    timeout: timeout || 120000\n  });\n  if (!r.data || !r.data.rows || !r.data.rows.length) {\n    return [];\n  }\n\n  // deps number must >= 100\n  var rows = r.data.rows.filter(function (a) {\n    return a.value >= 100;\n  });\n\n  return rows.sort(function (a, b) {\n    return b.value - a.value;\n  })\n  .slice(0, top)\n  .map(function (r) {\n    return [r.key && r.key[0] && r.key[0].trim(), r.value];\n  })\n  .filter(function (r) {\n    return r[0];\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/controllers/total.js":"'use strict';\n\nconst Total = require('../services/total');\nconst version = require('../package.json').version;\nconst config = require('../config');\nconst getDownloadTotal = require('./utils').getDownloadTotal;\n\nconst startTime = '' + Date.now();\nlet cache = null;\n\nmodule.exports = function* showTotal() {\n  if (cache && Date.now() - cache.cache_time < 10000) {\n    // cache 10 seconds\n    this.body = cache;\n    return;\n  }\n\n  const r = yield [Total.get(), getDownloadTotal()];\n  const total = r[0];\n  const download = r[1];\n\n  total.download = download;\n  total.db_name = 'registry';\n  total.instance_start_time = startTime;\n  total.node_version = process.version;\n  total.app_version = version;\n  total.donate = 'https://www.gittip.com/fengmk2';\n  total.sync_model = config.syncModel;\n\n  cache = total;\n  total.cache_time = Date.now();\n\n  this.body = total;\n};\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/services/total.js":"/**\n * Copyright(c) cnpm and other contributors.\n * MIT Licensed\n *\n * Authors:\n *   fengmk2 <fengmk2@gmail.com> (http://fengmk2.com)\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar config = require('../config');\nvar models = require('../models');\nvar Total = models.Total;\n\nvar TOTAL_MODULE_SQL = 'SELECT count(distinct(name)) AS count FROM module;';\nvar TOTAL_VERSION_SQL = 'SELECT count(name) AS count FROM module;';\nvar TOTAL_USER_SQL = 'SELECT count(name) AS count FROM user;';\nif (config.database.dialect === 'postgres') {\n  // pg not allow table name as 'user'\n  TOTAL_USER_SQL = 'SELECT count(name) AS count FROM public.user;';\n}\n\nexports.get = function* () {\n  // var DB_SIZE_SQL = 'SELECT TABLE_NAME AS name, data_length, index_length \\\n  //   FROM information_schema.tables WHERE TABLE_SCHEMA = ? \\\n  //   GROUP BY TABLE_NAME \\\n  //   ORDER BY data_length DESC \\\n  //   LIMIT 0, 200';\n  var rs = yield [\n    // models.query(DB_SIZE_SQL, [config.db]),\n    models.queryOne(TOTAL_MODULE_SQL),\n    models.queryOne(TOTAL_VERSION_SQL),\n    models.queryOne(TOTAL_USER_SQL),\n    exports.getTotalInfo(),\n  ];\n\n  // var sizes = rs[0];\n  var mc = rs[0];\n  var vc = rs[1];\n  var uc = rs[2];\n  var info = rs[3] || {};\n\n  if (typeof info.module_delete === 'string') {\n    info.module_delete = Number(info.module_delete);\n  }\n\n  var total = {\n    data_tables: {},\n    disk_size: 0,\n    data_size: 0,\n    index_size: 0,\n    disk_format_version: 0,\n    committed_update_seq: 0,\n    update_seq: 0,\n    purge_seq: 0,\n    compact_running: false,\n    doc_count: mc.count,\n    doc_del_count: info.module_delete || 0,\n    doc_version_count: vc.count,\n    user_count: uc.count,\n    store_engine: config.database.dialect,\n    sync_status: info.sync_status,\n    need_sync_num: info.need_sync_num || 0,\n    success_sync_num: info.success_sync_num || 0,\n    fail_sync_num: info.fail_sync_num || 0,\n    left_sync_num: info.left_sync_num || 0,\n    last_sync_time: info.last_sync_time || 0,\n    last_exist_sync_time: info.last_exist_sync_time || 0,\n    last_sync_module: info.last_sync_module || '',\n  };\n\n  // for (var i = 0; i < sizes.length; i++) {\n  //   var row = sizes[i];\n  //   total.data_tables[row.name] = {\n  //     data_size: row.data_length,\n  //     index_size: row.index_length,\n  //   };\n  //   total.data_size += row.data_length;\n  //   total.index_size += row.index_length;\n  // }\n\n  total.disk_size = total.data_size + total.index_size;\n\n  return total;\n};\n\nexports.getTotalInfo = function* () {\n  var row = yield Total.find({\n    where: {\n      name: 'total'\n    }\n  });\n  if (row && typeof row.module_delete === 'string') {\n    row.module_delete = Number(row.module_delete);\n  }\n  return row;\n};\n\nexports.plusDeleteModule = function* () {\n  var sql = 'UPDATE total SET module_delete=module_delete+1 WHERE name=\\'total\\'';\n  return yield* models.query(sql);\n};\n\nexports.setLastSyncTime = function* (time) {\n  var sql = 'UPDATE total SET last_sync_time=? WHERE name=\\'total\\'';\n  return yield* models.query(sql, [Number(time)]);\n};\n\nexports.setLastExistSyncTime = function* (time) {\n  var sql = 'UPDATE total SET last_exist_sync_time=? WHERE name=\\'total\\'';\n  return yield* models.query(sql, [Number(time)]);\n};\n\nexports.updateSyncStatus = function* (status) {\n  var sql = 'UPDATE total SET sync_status=? WHERE name=\\'total\\'';\n  return yield* models.query(sql, [status]);\n};\n\nexports.updateSyncNum = function* (params) {\n  var args = [\n    params.syncStatus,\n    params.need || 0,\n    params.success || 0,\n    params.fail || 0,\n    params.left || 0,\n    params.lastSyncModule\n  ];\n  var sql = 'UPDATE total SET \\\n    sync_status=?, need_sync_num=?, success_sync_num=?, \\\n    fail_sync_num=?, left_sync_num=?, last_sync_module=? \\\n    WHERE name=\\'total\\'';\n  return yield* models.query(sql, args);\n};\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/controllers/utils.js":"/**!\n * cnpmjs.org - controllers/utils.js\n *\n * Copyright(c) fengmk2 and other contributors.\n * MIT Licensed\n *\n * Authors:\n *   fengmk2 <fengmk2@gmail.com> (http://fengmk2.github.com)\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar debug = require('debug')('cnpmjs.org:controllers:utils');\nvar path = require('path');\nvar fs = require('fs');\nvar utility = require('utility');\nvar ms = require('humanize-ms');\nvar moment = require('moment');\nvar downloadTotalService = require('../services/download_total');\nvar nfs = require('../common/nfs');\nvar config = require('../config');\n\nvar DOWNLOAD_TIMEOUT = ms('10m');\n\nexports.downloadAsReadStream = function* (key) {\n  var options = { timeout: DOWNLOAD_TIMEOUT };\n  if (nfs.createDownloadStream) {\n    return yield nfs.createDownloadStream(key, options);\n  }\n\n  var tmpPath = path.join(config.uploadDir,\n    utility.randomString() + key.replace(/\\//g, '-'));\n  function cleanup() {\n    debug('cleanup %s', tmpPath);\n    fs.unlink(tmpPath, utility.noop);\n  }\n  debug('downloadAsReadStream() %s to %s', key, tmpPath);\n  try {\n    yield nfs.download(key, tmpPath, options);\n  } catch (err) {\n    debug('downloadAsReadStream() %s to %s error: %s', key, tmpPath, err.stack);\n    cleanup();\n    throw err;\n  }\n  var tarball = fs.createReadStream(tmpPath);\n  tarball.once('error', cleanup);\n  tarball.once('end', cleanup);\n  return tarball;\n};\n\nexports.getDownloadTotal = function* (name) {\n  var end = moment();\n  var start = end.clone().subtract(1, 'months').startOf('month');\n  var lastday = end.clone().subtract(1, 'days').format('YYYY-MM-DD');\n  var lastweekStart = end.clone().subtract(1, 'weeks').startOf('isoweek');\n  var lastweekEnd = lastweekStart.clone().endOf('isoweek').format('YYYY-MM-DD');\n  var lastmonthEnd = start.clone().endOf('month').format('YYYY-MM-DD');\n  var thismonthStart = end.clone().startOf('month').format('YYYY-MM-DD');\n  var thisweekStart = end.clone().startOf('isoweek').format('YYYY-MM-DD');\n  start = start.format('YYYY-MM-DD');\n  end = end.format('YYYY-MM-DD');\n  lastweekStart = lastweekStart.format('YYYY-MM-DD');\n  var method = name ? 'getModuleTotal' : 'getTotal';\n  var args = [start, end];\n  if (name) {\n    args.unshift(name);\n  }\n\n  var rows = yield* downloadTotalService[method].apply(downloadTotalService, args);\n  var download = {\n    today: 0,\n    thisweek: 0,\n    thismonth: 0,\n    lastday: 0,\n    lastweek: 0,\n    lastmonth: 0,\n  };\n\n  for (var i = 0; i < rows.length; i++) {\n    var r = rows[i];\n    if (r.date === end) {\n      download.today += r.count;\n    }\n    if (r.date >= thismonthStart) {\n      download.thismonth += r.count;\n    }\n    if (r.date >= thisweekStart) {\n      download.thisweek += r.count;\n    }\n\n    if (r.date === lastday) {\n      download.lastday += r.count;\n    }\n    if (r.date >= lastweekStart && r.date <= lastweekEnd) {\n      download.lastweek += r.count;\n    }\n    if (r.date >= start && r.date <= lastmonthEnd) {\n      download.lastmonth += r.count;\n    }\n  }\n  return download;\n};\n\nexports.setLicense = function (pkg) {\n  var license;\n  license = pkg.license || pkg.licenses || pkg.licence || pkg.licences;\n  if (!license) {\n    return ;\n  }\n\n  if (Array.isArray(license)) {\n    license = license[0];\n  }\n\n  if (typeof license === 'object') {\n    pkg.license = {\n      name: license.name || license.type,\n      url: license.url\n    };\n  }\n\n  if (typeof license === 'string') {\n    if (license.match(/(http|https)(:\\/\\/)/ig)) {\n      pkg.license = {\n        name: license,\n        url: license\n      };\n    } else {\n      pkg.license = {\n        url: exports.getOssLicenseUrlFromName(license),\n        name: license\n      };\n    }\n  }\n};\n\nexports.getOssLicenseUrlFromName = function (name) {\n  var base = 'http://opensource.org/licenses/';\n\n  var licenseMap = {\n    'bsd': 'BSD-2-Clause',\n    'mit': 'MIT',\n    'x11': 'MIT',\n    'mit/x11': 'MIT',\n    'apache 2.0': 'Apache-2.0',\n    'apache2': 'Apache-2.0',\n    'apache 2': 'Apache-2.0',\n    'apache-2': 'Apache-2.0',\n    'apache': 'Apache-2.0',\n    'gpl': 'GPL-3.0',\n    'gplv3': 'GPL-3.0',\n    'gplv2': 'GPL-2.0',\n    'gpl3': 'GPL-3.0',\n    'gpl2': 'GPL-2.0',\n    'lgpl': 'LGPL-2.1',\n    'lgplv2.1': 'LGPL-2.1',\n    'lgplv2': 'LGPL-2.1'\n  };\n\n  return licenseMap[name.toLowerCase()] ?\n    base + licenseMap[name.toLowerCase()] : base + name;\n};\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/services/download_total.js":"/**!\n * Copyright(c) cnpm and other contributors.\n * MIT Licensed\n *\n * Authors:\n *   fengmk2 <fengmk2@gmail.com> (http://fengmk2.com)\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar utility = require('utility');\nvar DownloadTotal = require('../models').DownloadTotal;\n\nexports.getModuleTotal = function* (name, start, end) {\n  var startMonth = parseYearMonth(start);\n  var endMonth = parseYearMonth(end);\n  var rows = yield DownloadTotal.findAll({\n    where: {\n      date: {\n        gte: startMonth,\n        lte: endMonth\n      },\n      name: name\n    }\n  });\n  return formatRows(rows, start, end);\n};\n\nexports.getTotalByName = function* (name) {\n  var rows = yield DownloadTotal.findAll({\n    where: {\n      name: name\n    }\n  });\n  var count = 0;\n  rows.forEach(function (row) {\n    for (var i = 1; i <= 31; i++) {\n      var day = i < 10 ? '0' + i : String(i);\n      var field = 'd' + day;\n      var val = row[field];\n      if (typeof val === 'string') {\n        val = utility.toSafeNumber(val);\n      }\n      count += val;\n    }\n  });\n  return count;\n};\n\nexports.plusModuleTotal = function* (data) {\n  var yearMonth = parseYearMonth(data.date);\n  // all module download total\n  var row = yield DownloadTotal.find({\n    where: {\n      name: '__all__',\n      date: yearMonth\n    }\n  });\n  if (!row) {\n    row = DownloadTotal.build({\n      name: '__all__',\n      date: yearMonth,\n    });\n  }\n  var field = 'd' + data.date.substring(8, 10);\n  if (typeof row[field] === 'string') {\n    // pg bigint is string...\n    row[field] = utility.toSafeNumber(row[field]);\n  }\n  row[field] += data.count;\n  if (row.changed()) {\n    yield row.save();\n  }\n\n  row = yield DownloadTotal.find({\n    where: {\n      name: data.name,\n      date: yearMonth,\n    }\n  });\n  if (!row) {\n    row = DownloadTotal.build({\n      name: data.name,\n      date: yearMonth,\n    });\n  }\n  var field = 'd' + data.date.substring(8, 10);\n  if (typeof row[field] === 'string') {\n    // pg bigint is string...\n    row[field] = utility.toSafeNumber(row[field]);\n  }\n  row[field] += data.count;\n  if (row.changed()) {\n    return yield row.save();\n  }\n  return row;\n};\n\nexports.getTotal = function* (start, end) {\n  return yield exports.getModuleTotal('__all__', start, end);\n};\n\nfunction parseYearMonth(date) {\n  return Number(date.substring(0, 7).replace('-', ''));\n}\n\nfunction formatRows(rows, startDate, endDate) {\n  var dates = [];\n  rows.forEach(function (row) {\n    var date = String(row.date);\n    var month = date.substring(4, 6);\n    var year = date.substring(0, 4);\n    var yearMonth = year + '-' + month;\n    for (var i = 1; i <= 31; i++) {\n      var day = i < 10 ? '0' + i : String(i);\n      var field = 'd' + day;\n      var d = yearMonth + '-' + day;\n      var count = row[field];\n      if (typeof count === 'string') {\n        count = utility.toSafeNumber(count);\n      }\n      if (count > 0 && d >= startDate && d <= endDate) {\n        dates.push({\n          name: row.name,\n          count: count,\n          date: d\n        });\n      }\n    }\n  });\n  return dates;\n}\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/middleware/auth.js":"/**!\n * cnpmjs.org - middleware/auth.js\n *\n * Copyright(c) cnpmjs.org and other contributors.\n * MIT Licensed\n *\n * Authors:\n *  fengmk2 <fengmk2@gmail.com> (http://fengmk2.github.com)\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar debug = require('debug')('cnpmjs.org:middleware:auth');\nvar UserService = require('../services/user');\nvar config = require('../config');\n\n/**\n * Parse the request authorization\n * get the real user\n */\n\nmodule.exports = function () {\n  return function* auth(next) {\n    this.user = {};\n\n    var authorization = (this.get('authorization') || '').split(' ')[1] || '';\n    authorization = authorization.trim();\n    debug('%s %s with %j', this.method, this.url, authorization);\n    if (!authorization) {\n      return yield* unauthorized.call(this, next);\n    }\n\n    authorization = new Buffer(authorization, 'base64').toString();\n    var pos = authorization.indexOf(':');\n    if (pos === -1) {\n       return yield* unauthorized.call(this, next);\n    }\n\n    var username = authorization.slice(0, pos);\n    var password = authorization.slice(pos + 1);\n\n    var row;\n    try {\n      row = yield* UserService.auth(username, password);\n    } catch (err) {\n      // do not response error here\n      // many request do not need login\n      this.user.error = err;\n    }\n\n    if (!row) {\n      debug('auth fail user: %j, headers: %j', row, this.header);\n      return yield* unauthorized.call(this, next);\n    }\n\n    this.user.name = row.login;\n    this.user.isAdmin = row.site_admin;\n    this.user.scopes = row.scopes;\n    debug('auth pass user: %j, headers: %j', this.user, this.header);\n    yield* next;\n  };\n};\n\nfunction* unauthorized(next) {\n  if (!config.alwaysAuth || this.method !== 'GET') {\n    return yield* next;\n  }\n  this.status = 401;\n  this.set('WWW-Authenticate', 'Basic realm=\"sample\"');\n  if (this.accepts(['html', 'json']) === 'json') {\n    this.body = {\n      error: 'unauthorized',\n      reason: 'login first'\n    };\n  } else {\n    this.body = 'login first';\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/services/user.js":"/**!\n * cnpmjs.org - services/user.js\n *\n * Copyright(c) fengmk2 and other contributors.\n * MIT Licensed\n *\n * Authors:\n *   fengmk2 <fengmk2@gmail.com> (http://fengmk2.github.com)\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar config = require('../config');\nvar User = require('../models').User;\n\nif (!config.userService) {\n  var DefaultUserService = require('./default_user_service');\n  config.userService = new DefaultUserService();\n  config.customUserService = false;\n} else {\n  config.customUserService = true;\n}\nconfig.scopes = config.scopes || [];\n\nfunction convertUser(user) {\n  if (!user) {\n    return null;\n  }\n  user.scopes = user.scopes || [];\n  if (user.scopes.length === 0 && config.scopes.length > 0) {\n    user.scopes = config.scopes.slice();\n  }\n  return user;\n}\n\nexports.auth = function* (login, password) {\n  var user = yield* config.userService.auth(login, password);\n  return convertUser(user);\n};\n\nexports.get = function* (login) {\n  var user = yield* config.userService.get(login);\n  return convertUser(user);\n};\n\nexports.list = function* (logins) {\n  var users = yield* config.userService.list(logins);\n  return users.map(convertUser);\n};\n\nexports.search = function* (query, options) {\n  var users = yield* config.userService.search(query, options);\n  return users.map(convertUser);\n};\n\nexports.getAndSave = function* (login) {\n  if (config.customUserService) {\n    var user = yield* exports.get(login);\n    if (user) {\n      var data = {\n        user: user\n      };\n      yield* User.saveCustomUser(data);\n    }\n  }\n  return yield* User.findByName(login);\n};\n\nexports.authAndSave = function* (login, password) {\n  var user = yield* exports.auth(login, password);\n  if (user) {\n    if (config.customUserService) {\n      // make sure sync user meta to cnpm database\n      var data = {\n        rev: Date.now() + '-' + user.login,\n        user: user\n      };\n      yield* User.saveCustomUser(data);\n    }\n  }\n  return user;\n};\n\nexports.add = function* (user) {\n  return yield* User.add(user);\n};\n\nexports.update = function* (user) {\n  return yield* User.update(user);\n};\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/middleware/block.js":"/**!\n * cnpmjs.org - middleware/block.js\n *\n * Copyright(c) fengmk2 and other contributors.\n * MIT Licensed\n *\n * Authors:\n *   fengmk2 <fengmk2@gmail.com> (http://fengmk2.github.com)\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nmodule.exports = function () {\n  return function* block(next) {\n    var ua = String(this.get('user-agent')).toLowerCase();\n    if (ua === 'ruby') {\n      this.status = 403;\n      return this.body = {\n        message: 'forbidden Ruby user-agent, ip: ' + this.ip\n      };\n    }\n    yield* next;\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/middleware/exists_package.js":"/**!\n * Copyright(c) fengmk2 and other contributors.\n * MIT Licensed\n *\n * Authors:\n *   fengmk2 <fengmk2@gmail.com> (http://fengmk2.com)\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar packageService = require('../services/package');\n\nmodule.exports = function* (next) {\n  var name = this.params.name || this.params[0];\n  var pkg = yield packageService.getLatestModule(name);\n  if (pkg) {\n    return yield* next;\n  }\n  this.status = 404;\n  this.body = {\n    error: 'not_found',\n    reason: 'document not found'\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/middleware/opensearch.js":"/**!\n * cnpmjs.org - middleware/opensearch.js\n *\n * Copyright(c) cnpmjs.org and other contributors.\n * MIT Licensed\n *\n * Authors:\n *  dead_horse <dead_horse@qq.com> (http://deadhorse.me)\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar template = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\\n <OpenSearchDescription xmlns=\"http://a9.com/-/spec/opensearch/1.1/\">\\\n   <ShortName>CNPM</ShortName>\\\n   <Description>Search packages in CNPM.</Description>\\\n   <Tags>CNPM</Tags>\\\n    <Url method=\"get\" type=\"text/html\" template=\"http://${host}/browse/keyword/{searchTerms}\"/>\\\n </OpenSearchDescription>';\n\nmodule.exports = function *opensearch(next) {\n  if (this.path === '/opensearch.xml') {\n    this.type = 'text/xml';\n    this.charset = 'utf-8';\n    this.body = template.replace('${host}', this.host);\n  }\n  yield *next;\n};\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/middleware/proxy_to_npm.js":"'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar debug = require('debug')('cnpmjs.org:middleware:proxy_to_npm');\nvar config = require('../config');\n\nmodule.exports = function (options) {\n  var redirectUrl = config.sourceNpmRegistry;\n  var proxyUrls = [\n    // /:pkg, dont contains scoped package\n    /^\\/[\\w\\-\\.]+$/,\n    // /-/package/:pkg/dist-tags\n    /^\\/\\-\\/package\\/[\\w\\-\\.]+\\/dist-tags/,\n  ];\n  if (options && options.isWeb) {\n    redirectUrl = redirectUrl.replace('//registry.', '//');\n    proxyUrls = [\n      // /package/:pkg\n      /^\\/package\\/[\\w\\-\\.]+$/,\n    ];\n  }\n  return function* proxyToNpm(next) {\n    if (config.syncModel !== 'none') {\n      return yield next;\n    }\n    // only proxy read requests\n    if (this.method !== 'GET' && this.method !== 'HEAD') {\n      return yield next;\n    }\n\n    var pathname = this.path;\n    var match;\n    for (var i = 0; i < proxyUrls.length; i++) {\n      match = proxyUrls[i].test(pathname);\n      if (match) {\n        break;\n      }\n    }\n    if (!match) {\n      return yield next;\n    }\n\n    var url = redirectUrl + this.url;\n    debug('proxy to %s', url);\n    this.redirect(url);\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/middleware/registry_not_found.js":"/**!\n * cnpmjs.org - middleware/registry_not_found.js\n *\n * Copyright(c) cnpmjs.org and other contributors.\n * MIT Licensed\n *\n * Authors:\n *  dead_horse <dead_horse@qq.com> (http://deadhorse.me)\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nmodule.exports = function* notFound(next) {\n  yield* next;\n\n  if (this.status && this.status !== 404) {\n    return;\n  }\n  if (this.body && this.body.name) {\n    return;\n  }\n\n  this.status = 404;\n  this.body = {\n    error: 'not_found',\n    reason: 'document not found'\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/middleware/static.js":"/**!\n * cnpmjs.org - middleware/static.js\n *\n * Copyright(c) fengmk2 and other contributors.\n * MIT Licensed\n *\n * Authors:\n *   fengmk2 <fengmk2@gmail.com> (http://fengmk2.github.com)\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar path = require('path');\nvar middlewares = require('koa-middlewares');\nvar config = require('../config');\n\nvar staticDir = path.join(path.dirname(__dirname), 'public');\n\nmodule.exports = middlewares.staticCache(staticDir, {\n  buffer: config.debug ? false : true,\n  maxAge: config.debug ? 0 : 60 * 60 * 24 * 7,\n  alias: {\n    '/favicon.ico': '/favicon.png'\n  },\n  gzip: config.enableCompress,\n});\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/middleware/unpublishable.js":"/**!\n * cnpmjs.org - middleware/unpublishable.js\n *\n * Copyright(c) cnpmjs.org and other contributors.\n * MIT Licensed\n *\n * Authors:\n *  dead_horse <dead_horse@qq.com>\n */\n\n'use strict';\n\nmodule.exports = function *unpublishable(next) {\n  // only admin user can unpublish\n  if (!this.user.isAdmin) {\n    this.status = 403;\n    this.body = {\n      error: 'no_perms',\n      reason: 'Only administrators can unpublish module',\n    };\n    return;\n  }\n  yield next;\n};\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/middleware/web_not_found.js":"/**!\n * cnpmjs.org - middleware/web_not_found.js\n *\n * Copyright(c) cnpmjs.org and other contributors.\n * MIT Licensed\n *\n * Authors:\n *  dead_horse <dead_horse@qq.com> (http://deadhorse.me)\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar debug = require('debug')('cnpmjs.org:middleware:web_not_found');\n\nmodule.exports = function* notFound(next) {\n  yield* next;\n\n  if (this.status && this.status !== 404) {\n    return;\n  }\n  if (this.body) {\n    return;\n  }\n\n  var m = /^\\/([\\w\\-\\.]+)\\/?$/.exec(this.path);\n  if (!m) {\n    // scoped packages\n    m = /^\\/(@[\\w\\-\\.]+\\/[\\w\\-\\.]+)$/.exec(this.path);\n  }\n  debug('%s match %j', this.url, m);\n  if (m) {\n    return this.redirect('/package/' + m[1]);\n  }\n\n  // package not found\n  m = /\\/package\\/([\\w\\-\\_\\.]+)\\/?$/.exec(this.url);\n  var name = null;\n  var title = '404: Page Not Found';\n  if (m) {\n    name = m[1];\n    title = name + ' Not Found';\n  }\n\n  this.status = 404;\n  yield* this.render('404', {\n    title: title,\n    name: name\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/models/download_total.js":"/**!\n * cnpmjs.org - models/download_total.js\n *\n * Copyright(c) fengmk2 and other contributors.\n * MIT Licensed\n *\n * Authors:\n *   fengmk2 <fengmk2@gmail.com> (http://fengmk2.github.com)\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\n// CREATE TABLE IF NOT EXISTS `downloads` (\n//  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT 'primary key',\n//  `gmt_create` datetime NOT NULL COMMENT 'create time',\n//  `gmt_modified` datetime NOT NULL COMMENT 'modified time',\n//  `name` varchar(100) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'module name',\n//  `date` int unsigned NOT NULL COMMENT 'YYYYMM format',\n//  `d01` bigint(20) unsigned NOT NULL DEFAULT '0' COMMENT '01 download count',\n//  `d02` bigint(20) unsigned NOT NULL DEFAULT '0' COMMENT '02 download count',\n//  `d03` bigint(20) unsigned NOT NULL DEFAULT '0' COMMENT '03 download count',\n//  `d04` bigint(20) unsigned NOT NULL DEFAULT '0' COMMENT '04 download count',\n//  `d05` bigint(20) unsigned NOT NULL DEFAULT '0' COMMENT '05 download count',\n//  `d06` bigint(20) unsigned NOT NULL DEFAULT '0' COMMENT '06 download count',\n//  `d07` bigint(20) unsigned NOT NULL DEFAULT '0' COMMENT '07 download count',\n//  `d08` bigint(20) unsigned NOT NULL DEFAULT '0' COMMENT '08 download count',\n//  `d09` bigint(20) unsigned NOT NULL DEFAULT '0' COMMENT '09 download count',\n//  `d10` bigint(20) unsigned NOT NULL DEFAULT '0' COMMENT '10 download count',\n//  `d11` bigint(20) unsigned NOT NULL DEFAULT '0' COMMENT '11 download count',\n//  `d12` bigint(20) unsigned NOT NULL DEFAULT '0' COMMENT '12 download count',\n//  `d13` bigint(20) unsigned NOT NULL DEFAULT '0' COMMENT '13 download count',\n//  `d14` bigint(20) unsigned NOT NULL DEFAULT '0' COMMENT '14 download count',\n//  `d15` bigint(20) unsigned NOT NULL DEFAULT '0' COMMENT '15 download count',\n//  `d16` bigint(20) unsigned NOT NULL DEFAULT '0' COMMENT '16 download count',\n//  `d17` bigint(20) unsigned NOT NULL DEFAULT '0' COMMENT '17 download count',\n//  `d18` bigint(20) unsigned NOT NULL DEFAULT '0' COMMENT '18 download count',\n//  `d19` bigint(20) unsigned NOT NULL DEFAULT '0' COMMENT '19 download count',\n//  `d20` bigint(20) unsigned NOT NULL DEFAULT '0' COMMENT '20 download count',\n//  `d21` bigint(20) unsigned NOT NULL DEFAULT '0' COMMENT '21 download count',\n//  `d22` bigint(20) unsigned NOT NULL DEFAULT '0' COMMENT '22 download count',\n//  `d23` bigint(20) unsigned NOT NULL DEFAULT '0' COMMENT '23 download count',\n//  `d24` bigint(20) unsigned NOT NULL DEFAULT '0' COMMENT '24 download count',\n//  `d25` bigint(20) unsigned NOT NULL DEFAULT '0' COMMENT '25 download count',\n//  `d26` bigint(20) unsigned NOT NULL DEFAULT '0' COMMENT '26 download count',\n//  `d27` bigint(20) unsigned NOT NULL DEFAULT '0' COMMENT '27 download count',\n//  `d28` bigint(20) unsigned NOT NULL DEFAULT '0' COMMENT '28 download count',\n//  `d29` bigint(20) unsigned NOT NULL DEFAULT '0' COMMENT '29 download count',\n//  `d30` bigint(20) unsigned NOT NULL DEFAULT '0' COMMENT '30 download count',\n//  `d31` bigint(20) unsigned NOT NULL DEFAULT '0' COMMENT '31 download count',\n//  PRIMARY KEY (`id`),\n//  UNIQUE KEY `name_date` (`name`, `date`)\n//  KEY `date` (`date`)\n// ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='module download total info';\n\nmodule.exports = function (sequelize, DataTypes) {\n  return sequelize.define('DownloadTotal', {\n    name: {\n      type: DataTypes.STRING(100),\n      allowNull: false,\n      comment: 'module name',\n    },\n    date: {\n      type: DataTypes.INTEGER,\n      allowNull: false,\n      comment: 'YYYYMM format',\n    },\n    d01: {\n      type: DataTypes.BIGINT(20),\n      allowNull: false,\n      defaultValue: 0,\n      comment: '01 download count',\n    },\n    d02: {\n      type: DataTypes.BIGINT(20),\n      allowNull: false,\n      defaultValue: 0,\n      comment: '02 download count',\n    },\n    d03: {\n      type: DataTypes.BIGINT(20),\n      allowNull: false,\n      defaultValue: 0,\n      comment: '03 download count',\n    },\n    d04: {\n      type: DataTypes.BIGINT(20),\n      allowNull: false,\n      defaultValue: 0,\n      comment: '04 download count',\n    },\n    d05: {\n      type: DataTypes.BIGINT(20),\n      allowNull: false,\n      defaultValue: 0,\n      comment: '05 download count',\n    },\n    d06: {\n      type: DataTypes.BIGINT(20),\n      allowNull: false,\n      defaultValue: 0,\n      comment: '06 download count',\n    },\n    d07: {\n      type: DataTypes.BIGINT(20),\n      allowNull: false,\n      defaultValue: 0,\n      comment: '07 download count',\n    },\n    d08: {\n      type: DataTypes.BIGINT(20),\n      allowNull: false,\n      defaultValue: 0,\n      comment: '08 download count',\n    },\n    d09: {\n      type: DataTypes.BIGINT(20),\n      allowNull: false,\n      defaultValue: 0,\n      comment: '09 download count',\n    },\n    d10: {\n      type: DataTypes.BIGINT(20),\n      allowNull: false,\n      defaultValue: 0,\n      comment: '10 download count',\n    },\n    d11: {\n      type: DataTypes.BIGINT(20),\n      allowNull: false,\n      defaultValue: 0,\n      comment: '11 download count',\n    },\n    d12: {\n      type: DataTypes.BIGINT(20),\n      allowNull: false,\n      defaultValue: 0,\n      comment: '12 download count',\n    },\n    d13: {\n      type: DataTypes.BIGINT(20),\n      allowNull: false,\n      defaultValue: 0,\n      comment: '13 download count',\n    },\n    d14: {\n      type: DataTypes.BIGINT(20),\n      allowNull: false,\n      defaultValue: 0,\n      comment: '14 download count',\n    },\n    d15: {\n      type: DataTypes.BIGINT(20),\n      allowNull: false,\n      defaultValue: 0,\n      comment: '15 download count',\n    },\n    d16: {\n      type: DataTypes.BIGINT(20),\n      allowNull: false,\n      defaultValue: 0,\n      comment: '16 download count',\n    },\n    d17: {\n      type: DataTypes.BIGINT(20),\n      allowNull: false,\n      defaultValue: 0,\n      comment: '17 download count',\n    },\n    d18: {\n      type: DataTypes.BIGINT(20),\n      allowNull: false,\n      defaultValue: 0,\n      comment: '18 download count',\n    },\n    d19: {\n      type: DataTypes.BIGINT(20),\n      allowNull: false,\n      defaultValue: 0,\n      comment: '19 download count',\n    },\n    d20: {\n      type: DataTypes.BIGINT(20),\n      allowNull: false,\n      defaultValue: 0,\n      comment: '20 download count',\n    },\n    d21: {\n      type: DataTypes.BIGINT(20),\n      allowNull: false,\n      defaultValue: 0,\n      comment: '21 download count',\n    },\n    d22: {\n      type: DataTypes.BIGINT(20),\n      allowNull: false,\n      defaultValue: 0,\n      comment: '22 download count',\n    },\n    d23: {\n      type: DataTypes.BIGINT(20),\n      allowNull: false,\n      defaultValue: 0,\n      comment: '23 download count',\n    },\n    d24: {\n      type: DataTypes.BIGINT(20),\n      allowNull: false,\n      defaultValue: 0,\n      comment: '24 download count',\n    },\n    d25: {\n      type: DataTypes.BIGINT(20),\n      allowNull: false,\n      defaultValue: 0,\n      comment: '25 download count',\n    },\n    d26: {\n      type: DataTypes.BIGINT(20),\n      allowNull: false,\n      defaultValue: 0,\n      comment: '26 download count',\n    },\n    d27: {\n      type: DataTypes.BIGINT(20),\n      allowNull: false,\n      defaultValue: 0,\n      comment: '27 download count',\n    },\n    d28: {\n      type: DataTypes.BIGINT(20),\n      allowNull: false,\n      defaultValue: 0,\n      comment: '28 download count',\n    },\n    d29: {\n      type: DataTypes.BIGINT(20),\n      allowNull: false,\n      defaultValue: 0,\n      comment: '29 download count',\n    },\n    d30: {\n      type: DataTypes.BIGINT(20),\n      allowNull: false,\n      defaultValue: 0,\n      comment: '30 download count',\n    },\n    d31: {\n      type: DataTypes.BIGINT(20),\n      allowNull: false,\n      defaultValue: 0,\n      comment: '31 download count',\n    },\n  }, {\n    tableName: 'downloads',\n    comment: 'module download total info',\n    indexes: [\n      {\n        unique: true,\n        fields: ['name', 'date']\n      },\n      {\n        fields: ['date']\n      }\n    ],\n    classMethods: {\n\n    }\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/models/init_script.js":"/**!\n * cnpmjs.org - models/init_script.js\n *\n * Copyright(c) fengmk2 and other contributors.\n * MIT Licensed\n *\n * Authors:\n *   fengmk2 <fengmk2@gmail.com> (http://fengmk2.github.com)\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar config = require('../config');\n\nconfig.database.logging = console.log;\n\n// $ node --harmony models/init_script.js <force> <dialect> <port> <username>\nvar force = process.argv[2] === 'true';\nvar dialect = process.argv[3];\nif (dialect) {\n  config.database.dialect = dialect;\n}\nvar port = process.argv[4];\nif (port) {\n  config.database.port = parseInt(port);\n}\nvar username = process.argv[5];\nif (username) {\n  config.database.username = username;\n}\n\nvar models = require('./');\n\nmodels.sequelize.sync({\n  force: force,\n  logging: console.log,\n })\n  .then(function () {\n    models.Total.init(function (err) {\n      if (err) {\n        console.error('[models/init_script.js] sequelize init fail');\n        console.error(err);\n        throw err;\n      } else {\n        console.log('[models/init_script.js] `%s` sequelize sync and init success',\n          config.database.dialect);\n        process.exit(0);\n      }\n    });\n  })\n  .catch(function (err) {\n    console.error('[models/init_script.js] sequelize sync fail');\n    console.error(err);\n    process.exit(1);\n  });\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/models/module_deps.js":"/**!\n * cnpmjs.org - models/module_deps.js\n *\n * Copyright(c) fengmk2 and other contributors.\n * MIT Licensed\n *\n * Authors:\n *   fengmk2 <fengmk2@gmail.com> (http://fengmk2.github.com)\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\n/*\nCREATE TABLE IF NOT EXISTS `module_deps` (\n `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT 'primary key',\n `gmt_create` datetime NOT NULL COMMENT 'create time',\n `name` varchar(100) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'module name',\n `deps` varchar(100) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT '`name` is deped by `deps`',\n PRIMARY KEY (`id`),\n UNIQUE KEY `module_deps_name_deps` (`name`,`deps`),\n KEY `deps` (`module_deps_deps`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='module deps';\n */\n\nmodule.exports = function (sequelize, DataTypes) {\n  return sequelize.define('ModuleDependency', {\n    name: {\n      type: DataTypes.STRING(100),\n      allowNull: false,\n      comment: 'module name',\n    },\n    dependent: {\n      field: 'deps',\n      type: DataTypes.STRING(100),\n      comment: '`name` is depended by `deps`. `deps` == depend => `name`'\n    }\n  }, {\n    tableName: 'module_deps',\n    comment: 'module deps',\n    // no need update timestamp\n    updatedAt: false,\n    indexes: [\n      {\n        unique: true,\n        fields: ['name', 'deps']\n      },\n      {\n        fields: ['deps']\n      }\n    ],\n    classMethods: {\n    }\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/models/module.js":"/**!\n * cnpmjs.org - models/module.js\n *\n * Copyright(c) fengmk2 and other contributors.\n * MIT Licensed\n *\n * Authors:\n *   fengmk2 <fengmk2@gmail.com> (http://fengmk2.github.com)\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\n/*\nCREATE TABLE IF NOT EXISTS `module` (\n  `id` INTEGER NOT NULL auto_increment ,\n  `author` VARCHAR(100) NOT NULL,\n  `name` VARCHAR(100) NOT NULL,\n  `version` VARCHAR(30) NOT NULL,\n  `description` LONGTEXT,\n  `package` LONGTEXT,\n  `dist_shasum` VARCHAR(100),\n  `dist_tarball` VARCHAR(2048),\n  `dist_size` INTEGER UNSIGNED NOT NULL DEFAULT 0,\n  `publish_time` BIGINT(20) UNSIGNED,\n  `gmt_create` DATETIME NOT NULL,\n  `gmt_modified` DATETIME NOT NULL,\n  PRIMARY KEY (`id`)\n)\nCOMMENT 'module info' ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE utf8_general_ci;\n\nCREATE UNIQUE INDEX `module_name_version` ON `module` (`name`, `version`);\nCREATE INDEX `module_gmt_modified` ON `module` (`gmt_modified`);\nCREATE INDEX `module_publish_time` ON `module` (`publish_time`);\nCREATE INDEX `module_author` ON `module` (`author`);\n*/\n\nmodule.exports = function (sequelize, DataTypes) {\n  return sequelize.define('Module', {\n    author: {\n      type: DataTypes.STRING(100),\n      allowNull: false,\n      comment: 'first maintainer name'\n    },\n    name: {\n      type: DataTypes.STRING(100),\n      allowNull: false,\n      comment: 'module name'\n    },\n    version: {\n      type: DataTypes.STRING(30),\n      allowNull: false,\n      comment: 'module version'\n    },\n    description: {\n      type: DataTypes.LONGTEXT,\n    },\n    package: {\n      type: DataTypes.LONGTEXT,\n      comment: 'package.json',\n    },\n    dist_shasum: {\n      type: DataTypes.STRING(100),\n      allowNull: true,\n    },\n    dist_tarball: {\n      type: DataTypes.STRING(2048),\n      allowNull: true,\n    },\n    dist_size: {\n      type: DataTypes.INTEGER,\n      allowNull: false,\n      defaultValue: 0,\n    },\n    publish_time: {\n      type: DataTypes.BIGINT(20),\n      allowNull: true,\n    }\n  }, {\n    tableName: 'module',\n    comment: 'module info',\n    indexes: [\n      {\n        unique: true,\n        fields: ['name', 'version']\n      },\n      {\n        fields: ['gmt_modified']\n      },\n      {\n        fields: ['publish_time']\n      },\n      {\n        fields: ['author']\n      }\n    ],\n    classMethods: {\n      findByNameAndVersion: function* (name, version) {\n        return yield this.find({\n          where: { name: name, version: version }\n        });\n      }\n    }\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/models/module_keyword.js":"/**!\n * cnpmjs.org - models/module_keyword.js\n *\n * Copyright(c) fengmk2 and other contributors.\n * MIT Licensed\n *\n * Authors:\n *   fengmk2 <fengmk2@gmail.com> (http://fengmk2.github.com)\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\n/*\nCREATE TABLE IF NOT EXISTS `module_keyword` (\n `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT 'primary key',\n `gmt_create` datetime NOT NULL COMMENT 'create time',\n `keyword` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT 'keyword',\n `name` varchar(100) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'module name',\n `description` longtext,\n PRIMARY KEY (`id`),\n UNIQUE KEY `keyword_module_name` (`keyword`,`name`),\n KEY `name` (`name`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='module keyword';\n */\n\nmodule.exports = function (sequelize, DataTypes) {\n  return sequelize.define('ModuleKeyword', {\n    keyword: {\n      type: DataTypes.STRING(100),\n      allowNull: false,\n    },\n    name: {\n      type: DataTypes.STRING(100),\n      allowNull: false,\n      comment: 'module name',\n    },\n    description: {\n      type: DataTypes.LONGTEXT,\n      allowNull: true,\n    }\n  }, {\n    tableName: 'module_keyword',\n    comment: 'module keyword',\n    updatedAt: false,\n    indexes: [\n      {\n        unique: true,\n        fields: ['keyword', 'name']\n      },\n      {\n        fields: ['name']\n      }\n    ],\n    classMethods: {\n      findByKeywordAndName: function* (keyword, name) {\n        return yield this.find({\n          where: {\n            keyword: keyword,\n            name: name\n          }\n        });\n      }\n    }\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/models/_module_maintainer_class_methods.js":"/**!\n * cnpmjs.org - models/_module_maintainer_class_methods.js\n *\n * Copyright(c) fengmk2 and other contributors.\n * MIT Licensed\n *\n * Authors:\n *   fengmk2 <fengmk2@gmail.com> (http://fengmk2.github.com)\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\n/**\n * list all module names by user\n * @param {String} user\n */\n\nexports.listModuleNamesByUser = function* (user) {\n  var rows = yield this.findAll({\n    attributrs: ['name'],\n    where: {\n      user: user\n    }\n  });\n  return rows.map(function (row) {\n    return row.name;\n  });\n};\n\n/**\n * list all maintainers of module `name`\n * @param {String} name\n */\n\nexports.listMaintainers = function* (name) {\n  var rows = yield this.findAll({\n    attributrs: ['user'],\n    where: {\n      name: name\n    }\n  });\n  return rows.map(function (row) {\n    return row.user;\n  });\n};\n\n/**\n * add a maintainer for module `name`\n * @param {String} name\n * @param {String} user\n */\n\nexports.addMaintainer = function* (name, user) {\n  var row = yield this.find({\n    where: {\n      user: user,\n      name: name\n    }\n  });\n  if (!row) {\n    row = yield this.build({\n      user: user,\n      name: name\n    }).save();\n  }\n  return row;\n};\n\n/**\n * add maintainers for module `name`\n * @param {String} name\n * @param {Array} users\n */\n\nexports.addMaintainers = function* (name, users) {\n  return yield users.map(function (user) {\n    return this.addMaintainer(name, user);\n  }.bind(this));\n};\n\n/**\n * remove maintainers for module `name`\n * @param {String} name\n * @param {Array} users\n */\n\nexports.removeMaintainers = function* (name, users) {\n  // removeMaintainers(name, oneUserName)\n  if (typeof users === 'string') {\n    users = [users];\n  }\n  if (users.length === 0) {\n    return;\n  }\n  yield this.destroy({\n    where: {\n      name: name,\n      user: users,\n    }\n  });\n};\n\n/**\n * remove all maintainers for module `name`\n * @param {String} name\n */\n\nexports.removeAllMaintainers = function* (name) {\n  yield this.destroy({\n    where: {\n      name: name\n    }\n  });\n};\n\n/**\n * add maintainers to module\n * @param {String} name\n * @param {Array} users\n */\n\nexports.updateMaintainers = function* (name, users) {\n  // maintainers should be [username1, username2, ...] format\n  // find out the exists maintainers\n  // then remove all the users not present and add all the left\n\n  if (users.length === 0) {\n    return {\n      add: [],\n      remove: []\n    };\n  }\n  var exists = yield* this.listMaintainers(name);\n\n  var addUsers = users.filter(function (username) {\n    // add user which in `users` but do not in `exists`\n    return exists.indexOf(username) === -1;\n  });\n\n  var removeUsers = exists.filter(function (username) {\n    // remove user which in `exists` by not in `users`\n    return users.indexOf(username) === -1;\n  });\n\n  yield [\n    this.addMaintainers(name, addUsers),\n    this.removeMaintainers(name, removeUsers),\n  ];\n\n  return {\n    add: addUsers,\n    remove: removeUsers\n  };\n};\n\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/models/module_maintainer.js":"/**!\n * cnpmjs.org - models/module_maintainer.js\n *\n * Copyright(c) fengmk2 and other contributors.\n * MIT Licensed\n *\n * Authors:\n *   fengmk2 <fengmk2@gmail.com> (http://fengmk2.github.com)\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\n/*\nCREATE TABLE IF NOT EXISTS `module_maintainer` (\n `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT 'primary key',\n `gmt_create` datetime NOT NULL COMMENT 'create time',\n `user` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT 'user name',\n `name` varchar(100) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'module name',\n PRIMARY KEY (`id`),\n UNIQUE KEY `module_maintainer_user_name` (`user`,`name`),\n KEY `name` (`name`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='private module maintainers';\n */\n\nmodule.exports = function (sequelize, DataTypes) {\n  return sequelize.define('ModuleMaintainer', {\n    user: {\n      type: DataTypes.STRING(100),\n      allowNull: false,\n      comment: 'user name'\n    },\n    name: {\n      type: DataTypes.STRING(100),\n      allowNull: false,\n      comment: 'module name',\n    }\n  }, {\n    tableName: 'module_maintainer',\n    comment: 'private module maintainers',\n    updatedAt: false,\n    indexes: [\n      {\n        unique: true,\n        fields: ['user', 'name']\n      },\n      {\n        fields: ['name']\n      }\n    ],\n    classMethods: require('./_module_maintainer_class_methods'),\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/models/module_star.js":"/**!\n * cnpmjs.org - models/module_star.js\n *\n * Copyright(c) fengmk2 and other contributors.\n * MIT Licensed\n *\n * Authors:\n *   fengmk2 <fengmk2@gmail.com> (http://fengmk2.github.com)\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\n/*\nCREATE TABLE IF NOT EXISTS `module_star` (\n `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT 'primary key',\n `gmt_create` datetime NOT NULL COMMENT 'create time',\n `user` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT 'user name',\n `name` varchar(100) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'module name',\n PRIMARY KEY (`id`),\n UNIQUE KEY `module_star_user_name` (`user`,`name`),\n KEY `module_star_name` (`name`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='module star';\n */\n\nmodule.exports = function (sequelize, DataTypes) {\n  return sequelize.define('ModuleStar', {\n    user: {\n      type: DataTypes.STRING(100),\n      allowNull: false,\n      comment: 'user name'\n    },\n    name: {\n      type: DataTypes.STRING(100),\n      allowNull: false,\n      comment: 'module name',\n    }\n  }, {\n    tableName: 'module_star',\n    comment: 'module star',\n    updatedAt: false,\n    indexes: [\n      {\n        unique: true,\n        fields: ['user', 'name']\n      },\n      {\n        fields: ['name']\n      }\n    ],\n    classMethods: {\n    }\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/models/module_unpublished.js":"/**!\n * cnpmjs.org - models/module_unpublished.js\n *\n * Copyright(c) fengmk2 and other contributors.\n * MIT Licensed\n *\n * Authors:\n *   fengmk2 <fengmk2@gmail.com> (http://fengmk2.github.com)\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar utils = require('./utils');\n\n/*\nCREATE TABLE IF NOT EXISTS `module_unpublished` (\n `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT 'primary key',\n `gmt_create` datetime NOT NULL COMMENT 'create time',\n `gmt_modified` datetime NOT NULL COMMENT 'modified time',\n `name` varchar(100) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'module name',\n `package` longtext CHARACTER SET utf8 COLLATE utf8_general_ci COMMENT 'base info: tags, time, maintainers, description, versions',\n PRIMARY KEY (`id`),\n UNIQUE KEY `module_unpublished_name` (`name`),\n KEY `module_unpublished_gmt_modified` (`gmt_modified`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='module unpublished info';\n */\n\nmodule.exports = function (sequelize, DataTypes) {\n  return sequelize.define('ModuleUnpublished', {\n    name: {\n      type: DataTypes.STRING(100),\n      allowNull: false,\n      comment: 'module name',\n    },\n    package: {\n      type: DataTypes.LONGTEXT,\n      comment: 'base info: tags, time, maintainers, description, versions',\n      get: utils.JSONGetter('package'),\n      set: utils.JSONSetter('package'),\n    }\n  }, {\n    tableName: 'module_unpublished',\n    comment: 'module unpublished info',\n    indexes: [\n      {\n        unique: true,\n        fields: ['name']\n      },\n      {\n        fields: ['gmt_modified']\n      }\n    ],\n    classMethods: {\n      findByName: function* (name) {\n        return yield this.find({\n          where: {\n            name: name\n          }\n        });\n      },\n      save: function* (name, pkg) {\n        var row = yield this.find({\n          where: {\n            name: name\n          }\n        });\n        if (row) {\n          row.package = pkg;\n          if (row.changed()) {\n            row = yield row.save(['package']);\n          }\n          return row;\n        }\n\n        row = this.build({\n          name: name,\n          package: pkg,\n        });\n        return yield row.save();\n      }\n    }\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/models/utils.js":"/**!\n * cnpmjs.org - models/utils.js\n *\n * Copyright(c) fengmk2 and other contributors.\n * MIT Licensed\n *\n * Authors:\n *   fengmk2 <fengmk2@gmail.com> (http://fengmk2.github.com)\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nexports.JSONGetter = function (propertyName) {\n  return function JSONGetter() {\n    var value = this.getDataValue(propertyName);\n    if (value && typeof value === 'string') {\n      value = JSON.parse(value);\n    }\n    return value;\n  };\n};\n\nexports.JSONSetter = function (propertyName) {\n  return function JSONSetter(value) {\n    if (typeof value !== 'string') {\n      value = JSON.stringify(value);\n    }\n    this.setDataValue(propertyName, value);\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/models/npm_module_maintainer.js":"/**!\n * cnpmjs.org - models/npm_module_maintainer.js\n *\n * Copyright(c) fengmk2 and other contributors.\n * MIT Licensed\n *\n * Authors:\n *   fengmk2 <fengmk2@gmail.com> (http://fengmk2.github.com)\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\n/*\nCREATE TABLE IF NOT EXISTS `npm_module_maintainer` (\n `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT 'primary key',\n `gmt_create` datetime NOT NULL COMMENT 'create time',\n `user` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT 'user name',\n `name` varchar(100) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'module name',\n PRIMARY KEY (`id`),\n UNIQUE KEY `npm_module_maintainer_user_name` (`user`,`name`),\n KEY `name` (`name`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='npm original module maintainers';\n */\n\nmodule.exports = function (sequelize, DataTypes) {\n  return sequelize.define('NpmModuleMaintainer', {\n    user: {\n      type: DataTypes.STRING(100),\n      allowNull: false,\n      comment: 'user name'\n    },\n    name: {\n      type: DataTypes.STRING(100),\n      allowNull: false,\n      comment: 'module name',\n    }\n  }, {\n    tableName: 'npm_module_maintainer',\n    comment: 'npm original module maintainers',\n    updatedAt: false,\n    indexes: [\n      {\n        unique: true,\n        fields: ['user', 'name']\n      },\n      {\n        fields: ['name']\n      }\n    ],\n    classMethods: require('./_module_maintainer_class_methods'),\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/models/tag.js":"/**!\n * cnpmjs.org - models/tag.js\n *\n * Copyright(c) fengmk2 and other contributors.\n * MIT Licensed\n *\n * Authors:\n *   fengmk2 <fengmk2@gmail.com> (http://fengmk2.github.com)\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\n/*\nCREATE TABLE IF NOT EXISTS `tag` (\n `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT 'primary key',\n `gmt_create` datetime NOT NULL COMMENT 'create time',\n `gmt_modified` datetime NOT NULL COMMENT 'modified time',\n `name` varchar(100) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'module name',\n `tag` varchar(30) NOT NULL COMMENT 'tag name',\n `version` varchar(30) NOT NULL COMMENT 'module version',\n `module_id` bigint(20) unsigned NOT NULL COMMENT 'module id',\n PRIMARY KEY (`id`),\n UNIQUE KEY `tag_name_tag` (`name`, `tag`),\n KEY `tag_gmt_modified` (`gmt_modified`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='module tag';\n */\n\nmodule.exports = function (sequelize, DataTypes) {\n  return sequelize.define('Tag', {\n    name: {\n      type: DataTypes.STRING(100),\n      allowNull: false,\n      comment: 'module name',\n    },\n    tag: {\n      type: DataTypes.STRING(30),\n      allowNull: false,\n      comment: 'tag name',\n    },\n    version: {\n      type: DataTypes.STRING(30),\n      allowNull: false,\n      comment: 'module version',\n    },\n    module_id: {\n      type: DataTypes.BIGINT(20),\n      allowNull: false,\n      comment: 'module id'\n    }\n  }, {\n    tableName: 'tag',\n    comment: 'module tag',\n    indexes: [\n      {\n        unique: true,\n        fields: ['name', 'tag']\n      },\n      {\n        fields: ['gmt_modified']\n      }\n    ],\n    classMethods: {\n      findByNameAndTag: function* (name, tag) {\n        return yield this.find({ where: { name: name, tag: tag } });\n      }\n    }\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/models/total.js":"/**!\n * cnpmjs.org - models/total.js\n *\n * Copyright(c) fengmk2 and other contributors.\n * MIT Licensed\n *\n * Authors:\n *   fengmk2 <fengmk2@gmail.com> (http://fengmk2.github.com)\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\n// CREATE TABLE IF NOT EXISTS `total` (\n//  `name` varchar(100) NOT NULL COMMENT 'total name',\n//  `gmt_modified` datetime NOT NULL COMMENT 'modified time',\n//  `module_delete` bigint(20) unsigned NOT NULL DEFAULT '0' COMMENT 'module delete count',\n//  `last_sync_time` bigint(20) unsigned NOT NULL DEFAULT '0' COMMENT 'last timestamp sync from official registry',\n//  `last_exist_sync_time` bigint(20) unsigned NOT NULL DEFAULT '0' COMMENT 'last timestamp sync exist packages from official registry',\n//  `sync_status` tinyint unsigned NOT NULL DEFAULT '0' COMMENT 'system sync from official registry status',\n//  `need_sync_num` int unsigned NOT NULL DEFAULT '0' COMMENT 'how many packages need to be sync',\n//  `success_sync_num` int unsigned NOT NULL DEFAULT '0' COMMENT 'how many packages sync success at this time',\n//  `fail_sync_num` int unsigned NOT NULL DEFAULT '0' COMMENT 'how many packages sync fail at this time',\n//  `left_sync_num` int unsigned NOT NULL DEFAULT '0' COMMENT 'how many packages left to be sync',\n//  `last_sync_module` varchar(100) COMMENT 'last sync success module name',\n//  PRIMARY KEY (`name`)\n// ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='total info';\n// -- init `total` count\n// INSERT INTO total(name, gmt_modified) VALUES('total', now())\n//   ON DUPLICATE KEY UPDATE gmt_modified=now();\n\nmodule.exports = function (sequelize, DataTypes) {\n  return sequelize.define('Total', {\n    name: {\n      type: DataTypes.STRING(100),\n      primaryKey: true,\n      comment: 'total name'\n    },\n    module_delete: {\n      type: DataTypes.BIGINT(20),\n      allowNull: false,\n      defaultValue: 0,\n      comment: 'module delete count',\n    },\n    last_sync_time: {\n      type: DataTypes.BIGINT(20),\n      allowNull: false,\n      defaultValue: 0,\n      comment: 'last timestamp sync from official registry',\n    },\n    last_exist_sync_time: {\n      type: DataTypes.BIGINT(20),\n      allowNull: false,\n      defaultValue: 0,\n      comment: 'last timestamp sync exist packages from official registry',\n    },\n    sync_status: {\n      type: DataTypes.INTEGER,\n      allowNull: false,\n      defaultValue: 0,\n      comment: 'system sync from official registry status',\n    },\n    need_sync_num: {\n      type: DataTypes.INTEGER,\n      allowNull: false,\n      defaultValue: 0,\n      comment: 'how many packages need to be sync',\n    },\n    success_sync_num: {\n      type: DataTypes.INTEGER,\n      allowNull: false,\n      defaultValue: 0,\n      comment: 'how many packages sync success at this time',\n    },\n    fail_sync_num: {\n      type: DataTypes.INTEGER,\n      allowNull: false,\n      defaultValue: 0,\n      comment: 'how many packages sync fail at this time',\n    },\n    left_sync_num: {\n      type: DataTypes.INTEGER,\n      allowNull: false,\n      defaultValue: 0,\n      comment: 'how many packages left to be sync',\n    },\n    last_sync_module: {\n      type: DataTypes.STRING(100),\n      allowNull: true,\n      comment: 'last sync success module name',\n    },\n  }, {\n    tableName: 'total',\n    comment: 'total info',\n    createdAt: false,\n    classMethods: {\n      init: function (callback) {\n        var that = this;\n        that.find({\n          where: { name: 'total' }\n        }).then(function (row) {\n          if (!row) {\n            that.build({name: 'total'}).save()\n              .then(function () {\n                callback();\n              })\n              .catch(callback);\n            return;\n          }\n          callback();\n        }).catch(callback);\n      }\n    }\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/models/user.js":"/**!\n * cnpmjs.org - models/user.js\n *\n * Copyright(c) fengmk2 and other contributors.\n * MIT Licensed\n *\n * Authors:\n *   fengmk2 <fengmk2@gmail.com> (http://fengmk2.github.com)\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar utility = require('utility');\nvar utils = require('./utils');\n\n/*\nCREATE TABLE IF NOT EXISTS `user` (\n `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT 'primary key',\n `gmt_create` datetime NOT NULL COMMENT 'create time',\n `gmt_modified` datetime NOT NULL COMMENT 'modified time',\n `name` varchar(100) NOT NULL COMMENT 'user name',\n `salt` varchar(100) NOT NULL,\n `password_sha` varchar(100) NOT NULL COMMENT 'user password hash',\n `ip` varchar(64) NOT NULL COMMENT 'user last request ip',\n `roles` varchar(200) NOT NULL DEFAULT '[]',\n `rev` varchar(40) NOT NULL,\n `email` varchar(400) NOT NULL,\n `json` longtext CHARACTER SET utf8 COLLATE utf8_general_ci COMMENT 'json details',\n `npm_user` tinyint(1) DEFAULT '0' COMMENT 'user sync from npm or not, 1: true, other: false',\n PRIMARY KEY (`id`),\n UNIQUE KEY `user_name` (`name`),\n KEY `user_gmt_modified` (`gmt_modified`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='user base info';\n*/\n\nmodule.exports = function (sequelize, DataTypes) {\n  return sequelize.define('User', {\n    name: {\n      type: DataTypes.STRING(100),\n      allowNull: false,\n      comment: 'user name',\n    },\n    salt: {\n      type: DataTypes.STRING(100),\n      allowNull: false,\n    },\n    password_sha: {\n      type: DataTypes.STRING(100),\n      allowNull: false,\n      comment: 'user password hash',\n    },\n    ip: {\n      type: DataTypes.STRING(64),\n      allowNull: false,\n      comment: 'user last request ip',\n    },\n    roles: {\n      type: DataTypes.STRING(200),\n      allowNull: false,\n      defaultValue: '[]',\n    },\n    rev: {\n      type: DataTypes.STRING(40),\n      allowNull: false,\n    },\n    email: {\n      type: DataTypes.STRING(400),\n      allowNull: false,\n    },\n    json: {\n      type: DataTypes.LONGTEXT,\n      allowNull: true,\n      get: utils.JSONGetter('json'),\n      set: utils.JSONSetter('json'),\n    },\n    isNpmUser: {\n      field: 'npm_user',\n      type: DataTypes.BOOLEAN,\n      allowNull: false,\n      defaultValue: false,\n      comment: 'user sync from npm or not, 1: true, other: false',\n    }\n  }, {\n    tableName: 'user',\n    comment: 'user base info',\n    indexes: [\n      {\n        unique: true,\n        fields: ['name']\n      },\n      {\n        fields: ['gmt_modified']\n      }\n    ],\n    classMethods: {\n      // utils\n      createPasswordSha: function (password, salt) {\n        return utility.sha1(password + salt);\n      },\n\n      // read\n      auth: function* (name, password) {\n        var user = yield* this.findByName(name);\n        if (user) {\n          var sha = this.createPasswordSha(password, user.salt);\n          if (user.password_sha !== sha) {\n            user = null;\n          }\n        }\n        return user;\n      },\n      findByName: function* (name) {\n        return yield this.find({ where: { name: name } });\n      },\n      listByNames: function* (names) {\n        if (!names || names.length === 0) {\n          return [];\n        }\n        return yield this.findAll({\n          where: {\n            name: {\n              in: names\n            }\n          }\n        });\n      },\n      search: function* (query, options) {\n        return yield this.findAll({\n          where: {\n            name: {\n              like: query + '%'\n            }\n          },\n          limit: options.limit\n        });\n      },\n\n      // write\n      saveNpmUser: function* (data) {\n        var user = yield* this.findByName(data.name);\n        if (!user) {\n          user = this.build({\n            isNpmUser: true,\n            name: data.name,\n            salt: '0',\n            password_sha: '0',\n            ip: '0',\n          });\n        }\n        user.isNpmUser = true;\n        user.json = data;\n        user.email = data.email || '';\n        user.rev = data._rev || '';\n        if (user.changed()) {\n          user = yield user.save();\n        }\n        return user;\n      },\n      saveCustomUser: function* (data) {\n        var name = data.user.login;\n        var user = yield* this.findByName(name);\n        if (!user) {\n          user = this.build({\n            isNpmUser: false,\n            name: name,\n          });\n        }\n\n        var rev = '1-' + data.user.login;\n        var salt = data.salt || '0';\n        var passwordSha = data.password_sha || '0';\n        var ip = data.ip || '0';\n\n        user.isNpmUser = false;\n        user.email = data.user.email;\n        user.ip = ip;\n        user.json = data.user;\n        user.rev = rev;\n        user.salt = salt;\n        user.password_sha = passwordSha;\n        if (user.changed()) {\n          user = yield user.save();\n        }\n        return user;\n      },\n\n      // add cnpm user\n      add: function* (user) {\n        var roles = user.roles || [];\n        try {\n          roles = JSON.stringify(roles);\n        } catch (e) {\n          roles = '[]';\n        }\n        var rev = '1-' + utility.md5(JSON.stringify(user));\n\n        var row = this.build({\n          rev: rev,\n          name: user.name,\n          email: user.email,\n          salt: user.salt,\n          password_sha: user.password_sha,\n          ip: user.ip,\n          roles: roles,\n          isNpmUser: false,\n        });\n\n        return yield row.save();\n      },\n\n      update: function* (user) {\n        var rev = user.rev || user._rev;\n        var revNo = Number(rev.split('-', 1));\n        if (!revNo) {\n          var err = new Error(rev + ' format error');\n          err.name = 'RevFormatError';\n          err.data = {user: user};\n          throw err;\n        }\n        revNo++;\n        var newRev = revNo + '-' + utility.md5(JSON.stringify(user));\n        var roles = user.roles || [];\n        try {\n          roles = JSON.stringify(roles);\n        } catch (e) {\n          roles = '[]';\n        }\n\n        var row = yield* this.findByName(user.name);\n        if (!row) {\n          return null;\n        }\n\n        row.rev = newRev;\n        row.email = user.email;\n        row.salt = user.salt;\n        row.password_sha = user.password_sha;\n        row.ip = user.ip;\n        row.roles = roles;\n        row.isNpmUser = false;\n\n        return yield row.save(['rev', 'email', 'salt', 'password_sha', 'ip', 'roles', 'isNpmUser']);\n      }\n    }\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/routes/web.js":"'use strict';\n\nvar showPackage = require('../controllers/web/package/show');\nvar searchPackage = require('../controllers/web/package/search');\nvar searchRange = require('../controllers/web/package/search_range');\nvar listPrivates = require('../controllers/web/package/list_privates');\nvar showSync = require('../controllers/web/show_sync');\nvar showUser = require('../controllers/web/user/show');\nvar sync = require('../controllers/sync');\nvar showTotal = require('../controllers/total');\nvar badge = require('../controllers/web/badge');\n\nfunction routes(app) {\n  app.get('/total', showTotal);\n\n  // scope package without version\n  app.get(/\\/package\\/(@[\\w\\-\\.]+\\/[\\w\\-\\.]+)$/, showPackage);\n  // scope package with version\n  app.get(/\\/package\\/(@[\\w\\-\\.]+\\/[\\w\\-\\.]+)\\/([\\w\\d\\.]+)$/, showPackage);\n  app.get('/package/:name', showPackage);\n  app.get('/package/:name/:version', showPackage);\n\n  app.get('/privates', listPrivates);\n\n  app.get(/\\/browse\\/keyword\\/(@[\\w\\-\\.]+\\/[\\w\\-\\.]+)$/, searchPackage);\n  app.get('/browse/keyword/:word', searchPackage);\n\n  app.get('/~:name', showUser);\n\n  app.get(/\\/sync\\/(@[\\w\\-\\.]+\\/[\\w\\-\\.]+)$/, showSync);\n  app.get('/sync/:name', showSync);\n  app.get('/sync', showSync);\n  app.put(/\\/sync\\/(@[\\w\\-\\.]+\\/[\\w\\-\\.]+)$/, sync.sync);\n  app.put('/sync/:name', sync.sync);\n\n  app.get(/\\/sync\\/(@[\\w\\-\\.]+\\/[\\w\\-\\.]+)\\/log\\/(\\d+)$/, sync.getSyncLog);\n  app.get('/sync/:name/log/:id', sync.getSyncLog);\n\n  app.get('/_list/search/search', searchRange);\n\n  app.get(/^\\/badge\\/v\\/([@\\w\\-\\.\\/]+)\\.svg$/, badge.version);\n  app.get(/^\\/badge\\/d\\/([@\\w\\-\\.\\/]+)\\.svg$/, badge.downloads);\n}\n\nmodule.exports = routes;\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/controllers/web/package/show.js":"'use strict';\n\nvar debug = require('debug')('cnpmjs.org:controllers:web:package:show');\nvar bytes = require('bytes');\nvar giturl = require('giturl');\nvar moment = require('moment');\nvar semver = require('semver');\nvar gravatar = require('gravatar');\nvar humanize = require('humanize-number');\nvar config = require('../../../config');\nvar utils = require('../../utils');\nvar setDownloadURL = require('../../../lib/common').setDownloadURL;\nvar renderMarkdown = require('../../../common/markdown').render;\nvar packageService = require('../../../services/package');\n\nmodule.exports = function* show(next) {\n  var params = this.params;\n  // normal: {name: $name, version: $version}\n  // scope: [$name, $version]\n  var orginalName = params.name || params[0];\n  var name = orginalName;\n  var tag = params.version || params[1];\n  debug('display %s with %j', name, params);\n\n  var getPackageMethod;\n  var getPackageArgs;\n  var version = semver.valid(tag || '');\n  if (version) {\n    getPackageMethod = 'getModule';\n    getPackageArgs = [name, version];\n  } else {\n    getPackageMethod = 'getModuleByTag';\n    getPackageArgs = [name, tag || 'latest'];\n  }\n\n  var pkg = yield packageService[getPackageMethod].apply(packageService, getPackageArgs);\n  if (!pkg || !pkg.package) {\n    // check if unpublished\n    var unpublishedInfo = yield* packageService.getUnpublishedModule(name);\n    debug('show unpublished %j', unpublishedInfo);\n    if (unpublishedInfo) {\n      var data = {\n        name: name,\n        unpublished: unpublishedInfo.package\n      };\n      data.unpublished.time = new Date(data.unpublished.time);\n      if (data.unpublished.maintainers) {\n        for (var i = 0; i < data.unpublished.maintainers.length; i++) {\n          var maintainer = data.unpublished.maintainers[i];\n          if (maintainer.email) {\n            maintainer.gravatar = gravatar.url(maintainer.email, {s: '50', d: 'retro'}, true);\n          }\n        }\n      }\n      yield this.render('package_unpublished', {\n        package: data,\n        title: 'Package - ' + name\n      });\n      return;\n    }\n\n    return yield* next;\n  }\n\n  var r = yield [\n    utils.getDownloadTotal(name),\n    packageService.listDependents(name),\n    packageService.listStarUserNames(name),\n    packageService.listMaintainers(name)\n  ];\n  var download = r[0];\n  var dependents = r[1];\n  var users = r[2];\n  var maintainers = r[3];\n\n  pkg.package.fromNow = moment(pkg.publish_time).fromNow();\n  pkg = pkg.package;\n  pkg.users = users;\n  if (pkg.readme && typeof pkg.readme !== 'string') {\n    pkg.readme = 'readme is not string: ' + JSON.stringify(pkg.readme);\n  } else {\n    pkg.readme = renderMarkdown(pkg.readme || '');\n  }\n\n  if (!pkg.readme) {\n    pkg.readme = pkg.description || '';\n  }\n\n  if (maintainers.length > 0) {\n    pkg.maintainers = maintainers;\n  }\n\n  if (pkg.maintainers) {\n    for (var i = 0; i < pkg.maintainers.length; i++) {\n      var maintainer = pkg.maintainers[i];\n      if (maintainer.email) {\n        maintainer.gravatar = gravatar.url(maintainer.email, {s: '50', d: 'retro'}, true);\n      }\n    }\n  }\n\n  if (pkg._npmUser) {\n    pkg.lastPublishedUser = pkg._npmUser;\n    if (pkg.lastPublishedUser.email) {\n      pkg.lastPublishedUser.gravatar = gravatar.url(pkg.lastPublishedUser.email, {s: '50', d: 'retro'}, true);\n    }\n  }\n\n  if (pkg.repository === 'undefined') {\n    pkg.repository = null;\n  }\n  if (pkg.repository && pkg.repository.url) {\n    pkg.repository.weburl = /^https?:\\/\\//.test(pkg.repository.url) ? pkg.repository.url : (giturl.parse(pkg.repository.url) || pkg.repository.url);\n  }\n  if (!pkg.bugs) {\n    pkg.bugs = {};\n  }\n\n  utils.setLicense(pkg);\n\n  for (var k in download) {\n    download[k] = humanize(download[k]);\n  }\n  setDownloadURL(pkg, this, config.registryHost);\n\n  pkg.dependents = dependents;\n\n  if (pkg.dist) {\n    pkg.dist.size = bytes(pkg.dist.size || 0);\n  }\n\n  if (pkg.name !== orginalName) {\n    pkg.name = orginalName;\n  }\n\n  pkg.registryUrl = '//' + config.registryHost + '/' + pkg.name;\n\n  // pkg.engines = {\n  //   \"python\": \">= 0.11.9\",\n  //   \"node\": \">= 0.11.9\",\n  //   \"node1\": \">= 0.8.9\",\n  //   \"node2\": \">= 0.10.9\",\n  //   \"node3\": \">= 0.6.9\",\n  // };\n  if (pkg.engines) {\n    for (var k in pkg.engines) {\n      var engine = String(pkg.engines[k] || '').trim();\n      var color = 'blue';\n      if (k.indexOf('node') === 0) {\n        color = 'yellowgreen';\n        var version = /(\\d+\\.\\d+\\.\\d+)/.exec(engine);\n        if (version) {\n          version = version[0];\n          if (/^0\\.11\\.\\d+/.test(version)) {\n            color = 'red';\n          } else if (/^0\\.10\\./.test(version) ||\n              /^0\\.12\\./.test(version) ||\n              /^0\\.14\\./.test(version) ||\n              /^[^0]+\\./.test(version)) {\n            color = 'brightgreen';\n          }\n        }\n      }\n      pkg.engines[k] = {\n        version: engine,\n        title: k + ': ' + engine,\n        badgeURL: config.badgePrefixURL + '/' + encodeURIComponent(k) +\n          '-' + encodeURIComponent(engine) + '-' + color + '.svg?style=flat-square',\n      };\n    }\n  }\n\n  if (pkg._publish_on_cnpm) {\n    pkg.isPrivate = true;\n  } else {\n    pkg.isPrivate = false;\n    // add security check badge\n    pkg.snyk = {\n      badge: `${config.snykUrl}/test/npm/${pkg.name}/badge.svg?style=flat-square`,\n      url: `${config.snykUrl}/test/npm/${pkg.name}`,\n    };\n  }\n\n  yield this.render('package', {\n    title: 'Package - ' + pkg.name,\n    package: pkg,\n    download: download\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/servers/web.js":"'use strict';\n\nvar opensearch = require('../middleware/opensearch');\nvar notFound = require('../middleware/web_not_found');\nvar staticCache = require('../middleware/static');\nvar middlewares = require('koa-middlewares');\nvar markdownMiddleware = require('koa-markdown');\nvar block = require('../middleware/block');\nvar logger = require('../common/logger');\nvar renderMarkdown = require('../common/markdown').render;\nvar auth = require('../middleware/auth');\nvar proxyToNpm = require('../middleware/proxy_to_npm');\nvar routes = require('../routes/web');\nvar config = require('../config');\nvar jsonp = require('koa-safe-jsonp');\nvar path = require('path');\nvar http = require('http');\nvar koa = require('koa');\nvar fs = require('fs');\nvar maxrequests = require('koa-maxrequests');\n\nvar app = koa();\n\njsonp(app);\n\nvar rootdir = path.dirname(__dirname);\n\napp.use(maxrequests());\napp.use(block());\napp.use(middlewares.rt({headerName: 'X-ReadTime'}));\napp.use(middlewares.rewrite('/favicon.ico', '/favicon.png'));\napp.use(staticCache);\n\nif (config.pagemock) {\n  app.use(require('koa-mock')({\n    datadir: path.join(rootdir, 'test', 'mocks')\n  }));\n}\n\napp.use(opensearch);\napp.keys = ['todokey', config.sessionSecret];\napp.proxy = true;\napp.use(proxyToNpm({\n  isWeb: true\n}));\napp.use(middlewares.bodyParser());\napp.use(auth());\napp.use(notFound);\n\nif (config.enableCompress) {\n  app.use(middlewares.compress({threshold: 150}));\n}\n\napp.use(middlewares.conditional());\napp.use(middlewares.etag());\n\nvar viewDir = path.join(rootdir, 'view', 'web');\nvar docDir = path.join(rootdir, 'docs', 'web');\n\nvar layoutFile = path.join(viewDir, '_layout.html');\nvar footer = config.customFooter || fs.readFileSync(path.join(viewDir, 'footer.html'), 'utf8');\nvar layout = fs.readFileSync(path.join(viewDir, 'layout.html'), 'utf8')\n  .replace('{{footer}}', footer)\n  .replace('{{logoURL}}', config.logoURL)\n  .replace('{{adBanner}}', config.adBanner || '');\nfs.writeFileSync(layoutFile, layout);\n\n// custom web readme home page support\nvar readmeFile = path.join(docDir, '_readme.md');\nvar readmeContent;\nif (config.customReadmeFile) {\n  readmeContent = fs.readFileSync(config.customReadmeFile, 'utf8');\n} else {\n  readmeContent = fs.readFileSync(path.join(docDir, 'readme.md'), 'utf8');\n}\nfs.writeFileSync(readmeFile, readmeContent);\n\napp.use(markdownMiddleware({\n  baseUrl: '/',\n  root: docDir,\n  layout: layoutFile,\n  titleHolder: '<%= locals.title %>',\n  bodyHolder: '<%- locals.body %>',\n  indexName: '_readme',\n  cache: true,\n  render: function (content) {\n    return renderMarkdown(content, false);\n  },\n}));\n\nvar locals = {\n  config: config\n};\n\nmiddlewares.ejs(app, {\n  root: viewDir,\n  viewExt: 'html',\n  layout: '_layout',\n  cache: config.viewCache,\n  debug: config.debug,\n  locals: locals\n});\n\n/**\n * Routes\n */\napp.use(middlewares.router(app));\nroutes(app);\n\n/**\n * Error handler\n */\n\napp.on('error', function (err, ctx) {\n  err.url = err.url || ctx.request.url;\n  console.log(err);\n  console.log(err.stack);\n  logger.error(err);\n});\n\napp = http.createServer(app.callback());\n\nif (!module.parent) {\n  app.listen(config.webPort);\n}\n\nmodule.exports = app;\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/services/default_user_service.js":"/**!\n * cnpmjs.org - services/default_user_service.js\n *\n * Copyright(c) fengmk2 and other contributors.\n * MIT Licensed\n *\n * Authors:\n *   fengmk2 <fengmk2@gmail.com> (http://fengmk2.github.com)\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar gravatar = require('gravatar');\n// var User = require('../proxy/user');\nvar User = require('../models').User;\nvar isAdmin = require('../lib/common').isAdmin;\nvar config = require('../config');\n\n// User: https://github.com/cnpm/cnpmjs.org/wiki/Use-Your-Own-User-Authorization#user-data-structure\n// {\n//   \"login\": \"fengmk2\",\n//   \"email\": \"fengmk2@gmail.com\",\n//   \"name\": \"Yuan Feng\",\n//   \"html_url\": \"http://fengmk2.github.com\",\n//   \"avatar_url\": \"https://avatars3.githubusercontent.com/u/156269?s=460\",\n//   \"im_url\": \"\",\n//   \"site_admin\": false,\n//   \"scopes\": [\"@org1\", \"@org2\"]\n// }\n\nmodule.exports = DefaultUserService;\n\nfunction convertToUser(row) {\n  var user = {\n    login: row.name,\n    email: row.email,\n    name: row.name,\n    html_url: 'http://cnpmjs.org/~' + row.name,\n    avatar_url: '',\n    im_url: '',\n    site_admin: isAdmin(row.name),\n    scopes: config.scopes,\n  };\n  if (row.json) {\n    var data = row.json;\n    if (data.login) {\n      // custom user\n      user = data;\n    } else {\n      // npm user\n      if (data.avatar) {\n        user.avatar_url = data.avatar;\n      }\n      if (data.fullname) {\n        user.name = data.fullname;\n      }\n      if (data.homepage) {\n        user.html_url = data.homepage;\n      }\n      if (data.twitter) {\n        user.im_url = 'https://twitter.com/' + data.twitter;\n      }\n    }\n  }\n  if (!user.avatar_url) {\n    user.avatar_url = gravatar.url(user.email, {s: '50', d: 'retro'}, true);\n  }\n  return user;\n}\n\nfunction DefaultUserService() {}\n\nvar proto = DefaultUserService.prototype;\n\n/**\n * Auth user with login name and password\n * @param  {String} login    login name\n * @param  {String} password login password\n * @return {User}\n */\nproto.auth = function* (login, password) {\n  var row = yield* User.auth(login, password);\n  if (!row) {\n    return null;\n  }\n  return convertToUser(row);\n};\n\n/**\n * Get user by login name\n * @param  {String} login  login name\n * @return {User}\n */\nproto.get = function* (login) {\n  var row = yield User.findByName(login);\n  if (!row) {\n    return null;\n  }\n  return convertToUser(row);\n};\n\n/**\n * List users\n * @param  {Array<String>} logins  login names\n * @return {Array<User>}\n */\nproto.list = function* (logins) {\n  var rows = yield* User.listByNames(logins);\n  var users = [];\n  rows.forEach(function (row) {\n    users.push(convertToUser(row));\n  });\n  return users;\n};\n\n/**\n * Search users\n * @param  {String} query  query keyword\n * @param  {Object} [options] optional query params\n *  - {Number} limit match users count, default is `20`\n * @return {Array<User>}\n */\nproto.search = function* (query, options) {\n  options = options || {};\n  options.limit = parseInt(options.limit);\n  if (!options.limit || options.limit < 0) {\n    options.limit = 20;\n  }\n\n  var rows = yield* User.search(query, options);\n  var users = [];\n  rows.forEach(function (row) {\n    users.push(convertToUser(row));\n  });\n  return users;\n};\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/sync/changes_stream_syncer.js":"'use strict';\n\nconst ChangesStream = require('changes-stream');\nconst path = require('path');\nconst fs = require('mz/fs');\nconst urllib = require('urllib');\nconst streamAwait = require('await-event');\nconst logger = require('../common/logger');\nconst config = require('../config');\n\nconst db = config.officialNpmReplicate;\nconst lastSeqFile = path.join(config.dataDir, '.cnpmjs.org.last_seq.txt');\nlet _STREAM_ID = 0;\n\nmodule.exports = function* sync() {\n  const since = yield getLastSequence();\n  const streamId = _STREAM_ID++;\n  let changesCount = 0;\n  logger.syncInfo('start changes stream#%d, since: %s', streamId, since);\n  const changes = new ChangesStream({\n    db,\n    since,\n    include_docs: false,\n  });\n  changes.await = streamAwait;\n  changes.on('data', change => {\n    changesCount++;\n    logger.syncInfo('stream#%d get change#%d: %j', streamId, changesCount, change);\n    syncPackage(change);\n  });\n\n  try {\n    yield changes.await('error');\n  } catch (err) {\n    // make sure changes steam is destroy\n    changes.destroy();\n    err.message += `, stream#${streamId}, changesCount#${changesCount}`;\n    throw err;\n  }\n};\n\nfunction syncPackage(change) {\n  const url = `${config.handleSyncRegistry}/${change.id}/sync`;\n  urllib.request(url, {\n    method: 'PUT',\n    dataType: 'json',\n    timeout: 10000,\n  }, (err, data) => {\n    if (err) {\n      logger.syncInfo('%s:%s PUT %s error: %s, retry after 5s',\n        change.seq, change.id, url, err);\n      logger.syncError(err);\n      syncPackage(change);\n      setTimeout(() => syncPackage(change), 5000);\n    } else {\n      saveLastSequence(change.seq);\n      logger.syncInfo('%s:%s sync request sent, log: %s/log/%s',\n        change.seq, change.id, url, data.logId);\n    }\n  });\n}\n\nfunction* getLastSequence() {\n  let lastSeq;\n  if (yield fs.exists(lastSeqFile)) {\n    lastSeq = yield fs.readFile(lastSeqFile, 'utf8');\n    lastSeq = Number(lastSeq);\n  }\n  if (!lastSeq) {\n    lastSeq = 2649694;\n  }\n  // const r = yield urllib.request(db, {\n  //   dataType: 'json',\n  //   timeout: 15000,\n  // });\n  // logger.syncInfo('get registry info: %j', r.data);\n  // if (lastSeq < r.data.update_seq) {\n  //   lastSeq = r.data.update_seq;\n  // }\n  return lastSeq;\n}\n\nfunction saveLastSequence(seq) {\n  fs.writeFile(lastSeqFile, String(seq), () => {});\n}\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/sync/status.js":"'use strict';\n\nvar debug = require('debug')('cnpmjs.org:sync:status');\nvar co = require('co');\nvar Total = require('../services/total');\n\nfunction Status(options) {\n  this.need = options.need;\n  this.lastSyncModule = '';\n  this.successes = 0;\n  this.fails = 0;\n  this.left = options.need;\n}\n\nStatus.prototype.log = function (syncDone) {\n  var params = {\n    syncStatus: syncDone ? 0 : 1,\n    need: this.need,\n    success: this.successes,\n    fail: this.fails,\n    left: this.left,\n    lastSyncModule: this.lastSyncModule,\n  };\n  co(function* () {\n    yield Total.updateSyncNum(params);\n  }).catch(function () {});\n};\n\nStatus.prototype.start = function () {\n  if (this.started) {\n    return;\n  }\n  this.started = true;\n  //every 30s log it into mysql\n  this.timer = setInterval(this.log.bind(this), 30000);\n};\n\nStatus.prototype.stop = function () {\n  this.log(true);\n  clearInterval(this.timer);\n  this.timer = null;\n  this.started = false;\n};\n\nStatus.init = function (options, worker) {\n  var status = new Status(options);\n  status.start();\n  worker.on('success', function (moduleName) {\n    debug('sync [%s] success', moduleName);\n    status.lastSyncModule = moduleName;\n    status.successes++;\n    status.left--;\n  });\n  worker.on('fail', function () {\n    status.fails++;\n    status.left--;\n  });\n  worker.on('add', function () {\n    status.left++;\n  });\n\n  worker.on('end', function () {\n    status.stop();\n  });\n};\n\nmodule.exports = Status;\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/sync/sync_all.js":"'use strict';\n\nvar thunkify = require('thunkify-wrap');\nvar config = require('../config');\nvar Status = require('./status');\nvar npmService = require('../services/npm');\nvar totalService = require('../services/total');\nvar SyncModuleWorker = require('../controllers/sync_module_worker');\nvar logger = require('../common/logger');\n\n/**\n * when sync from official at the first time\n * get all packages by short and restart from last synced module\n * @param {String} lastSyncModule\n */\nfunction* getFirstSyncPackages(lastSyncModule) {\n  var pkgs = yield* npmService.getShort();\n  if (!lastSyncModule) {\n    return pkgs;\n  }\n  // start from last success\n  var lastIndex = pkgs.indexOf(lastSyncModule);\n  if (lastIndex > 0) {\n    return pkgs.slice(lastIndex);\n  }\n}\n\nmodule.exports = function* sync() {\n  var syncTime = Date.now();\n  var info = yield* totalService.getTotalInfo();\n  if (!info) {\n    throw new Error('can not found total info');\n  }\n\n  var packages;\n  logger.syncInfo('Last sync time %s', new Date(info.last_sync_time));\n  if (!info.last_sync_time) {\n    logger.syncInfo('First time sync all packages from official registry');\n    packages = yield* getFirstSyncPackages(info.last_sync_module);\n  } else {\n    var result = yield npmService.fetchUpdatesSince(info.last_sync_time);\n    syncTime = result.lastModified;\n    packages = result.names;\n  }\n\n  packages = packages || [];\n  if (!packages.length) {\n    logger.syncInfo('no packages need be sync');\n    return;\n  }\n  logger.syncInfo('Total %d packages to sync: %j', packages.length, packages);\n\n  var worker = new SyncModuleWorker({\n    username: 'admin',\n    name: packages,\n    noDep: true,\n    concurrency: config.syncConcurrency,\n    syncUpstreamFirst: false,\n  });\n  Status.init({\n    need: packages.length,\n  }, worker);\n  worker.start();\n  var end = thunkify.event(worker);\n  yield end();\n\n  logger.syncInfo('All packages sync done, successes %d, fails %d, updates %d',\n      worker.successes.length, worker.fails.length, worker.updates.length);\n  //only when all succss, set last sync time\n  if (!worker.fails.length) {\n    yield totalService.setLastSyncTime(syncTime);\n  }\n  return {\n    successes: worker.successes,\n    fails: worker.fails,\n    updates: worker.updates,\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/sync/sync_exist.js":"'use strict';\n\nvar debug = require('debug')('cnpmjs.org:sync:sync_exist');\nvar Status = require('./status');\nvar thunkify = require('thunkify-wrap');\nvar config = require('../config');\nvar npmService = require('../services/npm');\nvar packageService = require('../services/package');\nvar totalService = require('../services/total');\nvar Status = require('./status');\nvar SyncModuleWorker = require('../controllers/sync_module_worker');\n\nfunction intersection(arrOne, arrTwo) {\n  arrOne = arrOne || [];\n  arrTwo = arrTwo || [];\n  var map = {};\n  var results = [];\n  arrOne.forEach(function (name) {\n    map[name] = true;\n  });\n  arrTwo.forEach(function (name) {\n    map[name] === true && results.push(name);\n  });\n  return results;\n}\n\nmodule.exports = function* sync() {\n  var syncTime = Date.now();\n\n  var r = yield [packageService.listAllPublicModuleNames(), totalService.getTotalInfo()];\n  var existPackages = r[0];\n  var info = r[1];\n  if (!info) {\n    throw new Error('can not found total info');\n  }\n\n  var allPackages;\n  if (!info.last_exist_sync_time) {\n    var pkgs = yield npmService.getShort();\n    debug('First time sync all packages from official registry, got %d packages', pkgs.length);\n    if (info.last_sync_module) {\n      // start from last success\n      var lastIndex = pkgs.indexOf(info.last_sync_module);\n      if (lastIndex > 0) {\n        pkgs = pkgs.slice(lastIndex);\n        debug('recover from %d: %s', lastIndex, info.last_sync_module);\n      }\n    }\n    allPackages = pkgs;\n  } else {\n    debug('sync new module from last exist sync time: %s', info.last_exist_sync_time);\n    var result = yield npmService.fetchUpdatesSince(info.last_exist_sync_time);\n    allPackages = result.names;\n    syncTime = result.lastModified;\n  }\n\n  var packages = intersection(existPackages, allPackages);\n  if (!packages.length) {\n    debug('no packages need be sync');\n    return {\n      successes: [],\n      fails: []\n    };\n  }\n  debug('Total %d packages to sync, top 10: %j', packages.length, packages.slice(0, 10));\n\n  var worker = new SyncModuleWorker({\n    username: 'admin',\n    name: packages,\n    concurrency: config.syncConcurrency,\n    syncUpstreamFirst: false,\n  });\n  Status.init({need: packages.length}, worker);\n  worker.start();\n  var end = thunkify.event(worker);\n  yield end();\n\n  debug('All packages sync done, successes %d, fails %d',\n    worker.successes.length, worker.fails.length);\n\n  yield* totalService.setLastExistSyncTime(syncTime);\n  return {\n    successes: worker.successes,\n    fails: worker.fails\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/sync/sync_popular.js":"'use strict';\n\nvar debug = require('debug')('cnpmjs.org:sync:sync_popular');\nvar thunkify = require('thunkify-wrap');\nvar config = require('../config');\nvar npmService = require('../services/npm');\nvar Status = require('./status');\nvar SyncModuleWorker = require('../controllers/sync_module_worker');\nvar logger = require('../common/logger');\n\nmodule.exports = function* syncPopular() {\n  var packages = yield* npmService.getPopular(config.topPopular);\n  packages = packages.map(function (r) {\n    return r[0];\n  });\n\n  logger.syncInfo('Syncing %d popular packages, top 10: %j', packages.length, packages.slice(0, 10));\n\n  var worker = new SyncModuleWorker({\n    username: 'admin',\n    name: packages,\n    concurrency: config.syncConcurrency,\n    syncUpstreamFirst: false,\n  });\n\n  Status.init({need: packages.length}, worker);\n  worker.start();\n  var end = thunkify.event(worker);\n  yield end();\n\n  debug('All popular packages sync done, successes %d, fails %d',\n    worker.successes.length, worker.fails.length);\n\n  return {\n    successes: worker.successes,\n    fails: worker.fails\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/sync/sync_since.js":"'use strict';\n\nconst thunkify = require('thunkify-wrap');\nconst co = require('co');\nconst ms = require('humanize-ms');\nconst npmService = require('../services/npm');\nconst SyncModuleWorker = require('../controllers/sync_module_worker');\n\nfunction* sync(sinceTimestamp) {\n  console.log('Fetching packages since: %s', new Date(sinceTimestamp));\n  var result = yield npmService.fetchAllPackagesSince(sinceTimestamp);\n  var packages = result.names;\n\n  packages = packages || [];\n  if (!packages.length) {\n    console.log('no packages need be sync');\n    process.exit(0);\n  }\n  // var news = [];\n  // for (var i = 0; i < packages.length; i++) {\n  //   if (packages[i] === 'elwms') {\n  //     news = packages.slice(i);\n  //     break;\n  //   }\n  // }\n  // packages = news;\n  console.log('lastModified: %s, lastModified package: %s, total %d packages to sync: %j',\n    new Date(result.lastModified), result.lastModifiedName, packages.length, packages);\n\n  var worker = new SyncModuleWorker({\n    username: 'sync_since',\n    name: packages,\n    noDep: true,\n    concurrency: 1,\n    syncUpstreamFirst: false,\n  });\n  worker.start();\n  var end = thunkify.event(worker);\n  yield end();\n\n  console.log('All packages sync done, successes %d, fails %d',\n      worker.successes.length, worker.fails.length);\n  process.exit(0);\n}\n\nco(function* () {\n  var timestamp = Date.now() - ms(process.argv[2] || '30d');\n  yield sync(timestamp);\n}).catch(function (err) {\n  console.error(err.stack);\n  process.exit(1);\n});\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/tools/resync_npm_issue_87.js":"// try to fix https://github.com/npm/registry/issues/87\n\nconst urllib = require('urllib');\nconst co = require('co');\n\nconst sleep = ms => cb => setTimeout(cb, ms);\n\n// node resync_npm.js [registry]\nconst registry = process.argv[2] || require('../config').sourceNpmRegistry;\nconst url = 'https://os.alipayobjects.com/rmsportal/eDMScnlBhNhHaGXMJWxjvCjfxMHhYwEx.html';\n\nco(function* () {\n  const result = yield urllib.request(url);\n  const items = result.data.toString().split('\\n');\n  let count = 0;\n  for (let item of items) {\n    item = item.trim().split(',');\n    let name = item[0];\n    name = name.substring(1, name.length - 1);\n    if (!name) {\n      continue;\n    }\n\n    const r = yield urllib.request(`${registry}/${name}/sync`, {\n      method: 'PUT',\n      dataType: 'json',\n    });\n\n    r.data = r.data || {};\n\n    count++;\n    console.log('#%d %s %s, log: %s',\n      count, name, r.status, `${registry}/${name}/sync/log/${r.data.logId}`);\n    if (count % 50 === 0) {\n      yield sleep(10000);\n    }\n  }\n  console.log('All %d packages sync done', items.length);\n  process.exit(0);\n}).catch(err => {\n  console.error(err.stack);\n  process.exit(1);\n});\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/tools/sync_download_total.js":"var co = require('co');\nvar moment = require('moment');\nvar models = require('../models');\nvar DownloadTotal = models.DownloadTotal;\n\nfunction parseYearMonth(date) {\n  return Number(date.substring(0, 7).replace('-', ''));\n}\n\nfunction* plusModuleTotal(data) {\n  var yearMonth = parseYearMonth(data.date);\n  row = yield DownloadTotal.find({\n    where: {\n      name: data.name,\n      date: yearMonth,\n    }\n  });\n  if (!row) {\n    row = DownloadTotal.build({\n      name: data.name,\n      date: yearMonth,\n    });\n  }\n  var field = 'd' + data.date.substring(8, 10);\n  row[field] += data.count;\n  if (row.isDirty) {\n    return yield row.save();\n  }\n  return row;\n}\n\nco(function* () {\n  var result = yield models.query('select count(*) as count from downloads;');\n  if (result[0].count > 0) {\n    console.log('downloads has %d rows, no need to sync', result[0].count);\n    return;\n  }\n  var lastId = 0;\n  var count = 0;\n  while (true) {\n    var rows = yield models.query('select id, name, date, count from download_total where id > ? limit 10000;', [lastId]);\n    count += rows.length;\n    console.log('[%s] last id: %s, got %d rows, total %d', Date(), lastId, rows.length, count);\n    if (rows.length === 0) {\n      break;\n    }\n    console.log('%j', rows[0]);\n    var tasks = [];\n    var currentDate = null;\n    var allCount = 0;\n    for (var i = 0; i < rows.length; i++) {\n      var row = rows[i];\n      lastId = row.id;\n      var date = row.date;\n      if (typeof date !== 'string') {\n        date = moment(date).format('YYYY-MM-DD');\n      }\n      if (!currentDate) {\n        currentDate = date;\n      }\n      if (currentDate !== date) {\n        console.log('saving %s %d rows, total count %d', currentDate, tasks.length, allCount);\n        // date change, flush tasks\n        tasks.push(plusModuleTotal({\n          date: currentDate,\n          name: '__all__',\n          count: allCount\n        }));\n        allCount = 0;\n        yield tasks;\n        tasks = [];\n        currentDate = null;\n      }\n\n      tasks.push(plusModuleTotal({\n        date: date,\n        name: row.name,\n        count: row.count,\n      }));\n      allCount += row.count;\n\n      if (tasks.length >= 100) {\n        console.log('saving %s %d rows, total count %d', currentDate, tasks.length, allCount);\n        tasks.push(plusModuleTotal({\n          date: currentDate,\n          name: '__all__',\n          count: allCount\n        }));\n        allCount = 0;\n        yield tasks;\n        tasks = [];\n        currentDate = null;\n      }\n    }\n\n    if (allCount > 0) {\n      tasks.push({\n        date: currentDate,\n        name: '__all__',\n        count: allCount\n      });\n    }\n    if (tasks.length > 0) {\n      console.log('saving %s %d rows, total count %d', currentDate, tasks.length, allCount);\n      yield tasks;\n    }\n  }\n}).then(function () {\n  console.log('sync done, you can upgrade to 2.x now.');\n  process.exit(0);\n}).catch(function (err) {\n  console.error(err);\n  throw err;\n});\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/controllers/registry/user_package.js":"/**!\n * cnpmjs.org - controllers/registry/user_package.js\n *\n * Copyright(c) fengmk2 and other contributors.\n * MIT Licensed\n *\n * Authors:\n *   fengmk2 <fengmk2@gmail.com> (http://fengmk2.github.com)\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar packageService = require('../../services/package');\n\n// GET /-/by-user/:user\nexports.list = function* () {\n  var users = this.params.user.split('|');\n  if (users.length > 20) {\n    this.status = 400;\n    this.body = {\n      error: 'bad_request',\n      reason: 'reach max user names limit, must <= 20 user names'\n    };\n    return;\n  }\n\n  var firstUser = users[0];\n  if (!firstUser) {\n    // params.user = '|'\n    this.body = {};\n    return;\n  }\n\n  var tasks = {};\n  for (var i = 0; i < users.length; i++) {\n    var username = users[i];\n    tasks[username] = packageService.listPublicModuleNamesByUser(username);\n  }\n\n  var data = yield tasks;\n  for (var k in data) {\n    if (data[k].length === 0) {\n      data[k] = undefined;\n    }\n  }\n  this.body = data;\n};\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/controllers/web/badge.js":"/**!\n * cnpmjs.org - controllers/web/badge.js\n *\n * Copyright(c) fengmk2 and other contributors.\n * MIT Licensed\n *\n * Authors:\n *   fengmk2 <fengmk2@gmail.com> (http://fengmk2.com)\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar utility = require('utility');\nvar util = require('util');\nvar config = require('../../config');\nvar packageService = require('../../services/package');\nvar DownloadTotal = require('../../services/download_total');\n\nexports.version = function* () {\n  var color = 'lightgrey';\n  var version = 'invalid';\n  var name = this.params[0];\n  var tag = this.query.tag || 'latest';\n  var info = yield* packageService.getModuleByTag(name, tag);\n  if (info) {\n    version = info.version;\n    if (/^0\\.0\\./.test(version)) {\n      // <0.1.0 & >=0.0.0\n      color = 'red';\n    } else if (/^0\\./.test(version)) {\n      // <1.0.0 & >=0.1.0\n      color = 'green';\n    } else {\n      // >=1.0.0\n      color = 'blue';\n    }\n  }\n\n  var subject = config.badgeSubject.replace(/\\-/g, '--');\n  if (this.query.subject) {\n    subject = this.query.subject.replace(/\\-/g, '--');\n  }\n  version = version.replace(/\\-/g, '--');\n  var style = this.query.style || 'flat-square';\n  var url = util.format(config.badgePrefixURL + '/%s-%s-%s.svg?style=%s',\n    utility.encodeURIComponent(subject), version, color, utility.encodeURIComponent(style));\n  this.redirect(url);\n};\n\nexports.downloads = function* () {\n  // https://dn-img-shields-io.qbox.me/badge/downloads-100k/month-brightgreen.svg?style=flat-square\n  var name = this.params[0];\n  var count = yield DownloadTotal.getTotalByName(name);\n  var style = this.query.style || 'flat-square';\n  var url = util.format(config.badgePrefixURL + '/downloads-%s-brightgreen.svg?style=%s',\n    count, utility.encodeURIComponent(style));\n  this.redirect(url);\n};\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/controllers/web/show_sync.js":"/**!\n * cnpmjs.org - controllers/web/show_sync.js\n *\n * Copyright(c) cnpmjs.org and other contributors.\n * MIT Licensed\n *\n * Authors:\n *  dead_horse <dead_horse@qq.com> (http://deadhorse.me)\n *  fengmk2 <fengmk2@gmail.com> (http://fengmk2.github.com)\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nmodule.exports = function* showSync() {\n  var name = this.params.name || this.params[0] || this.query.name;\n  if (!name) {\n    return this.redirect('/');\n  }\n  var type = 'package';\n  if (name.indexOf(':') > 0) {\n    var splits = name.split(':');\n    name = splits[1];\n    type = splits[0];\n  }\n  yield this.render('sync', {\n    type: type,\n    name: name,\n    title: 'Sync ' + type + ' - ' + name,\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-cnpmjs.org/node_modules/cnpmjs.org/public/js/readme.js":"$(function () {\n  function humanize(n, options) {\n    options = options || {};\n    var d = options.delimiter || ',';\n    var s = options.separator || '.';\n    n = n.toString().split('.');\n    n[0] = n[0].replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1' + d);\n    return n.join(s);\n  }\n\n  $.getJSON('/total', function (data) {\n    $('#total-packages').html(humanize(data.doc_count));\n    $('#total-versions').html(humanize(data.doc_version_count));\n    $('#total-deletes').html(humanize(data.doc_del_count));\n\n    var downloads = $('table.downloads');\n    downloads.find('td.count:eq(3)').html(humanize(data.download.today));\n    downloads.find('td.count:eq(4)').html(humanize(data.download.thisweek));\n    downloads.find('td.count:eq(5)').html(humanize(data.download.thismonth));\n    downloads.find('td.count:eq(6)').html(humanize(data.download.lastday));\n    downloads.find('td.count:eq(7)').html(humanize(data.download.lastweek));\n    downloads.find('td.count:eq(8)').html(humanize(data.download.lastmonth));\n\n    $('#node-version').html(data.node_version || 'v0.10.22');\n    $('#app-version').html(data.app_version || '0.0.0');\n\n    if (data.sync_model === 'all') {\n      $('#sync-model').html('This registry will sync all packages from official registry.');\n      $('#last-sync-time').html(new Date(data.last_sync_time));\n    } else if (data.sync_model === 'exist') {\n      $('#sync-model').html('This registry will only update exist packages from official registry.');\n      $('#last-sync-time').html(new Date(data.last_exist_sync_time));\n    }\n\n    $('#need-sync').html(data.need_sync_num);\n    $('#success-sync').html(data.success_sync_num);\n    $('#fail-sync').html(data.fail_sync_num);\n    $('#left-sync').html(data.left_sync_num);\n    $('#percent-sync').html(Math.floor(data.success_sync_num / data.need_sync_num * 100));\n    $('#last-success-name').html('<a target=\"_blank\" href=\"/package/' + data.last_sync_module + '\">' +\n      data.last_sync_module + '</a>');\n\n    if (!data.sync_status) {\n      $('.syncing').remove();\n    }\n\n    $('.sync').show();\n  });\n});\n"}